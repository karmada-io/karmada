repos:
  - repo: local
    hooks:
      - id: go-fmt
        name: go-fmt
        entry: gofmt
        language: system
        args: [-w]
        files: \.go$
        description: "Format Go code with gofmt"
      
      - id: go-vet
        name: go-vet
        entry: go vet
        language: system
        files: \.go$
        description: "Run go vet on Go files"
      
      - id: go-test-unit
        name: go-test-unit
        entry: go test
        language: system
        args: [-v, -short, -race, -coverprofile=coverage.out, ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/..., ./pkg/apis/apps/v1alpha1/...]
        files: \.go$
        description: "Run unit tests with coverage"
        pass_filenames: false
        always_run: true
      
      - id: go-test-integration
        name: go-test-integration
        entry: go test
        language: system
        args: [-v, -run, "Integration", ./pkg/controllers/application/...]
        files: \.go$
        description: "Run integration tests"
        pass_filenames: false
        always_run: true
      
      - id: go-test-edge
        name: go-test-edge
        entry: go test
        language: system
        args: [-v, -run, "Edge", ./pkg/controllers/application/...]
        files: \.go$
        description: "Run edge case tests"
        pass_filenames: false
        always_run: true
      
      - id: go-test-ui
        name: go-test-ui
        entry: go test
        language: system
        args: [-v, -run, "UI", ./pkg/controllers/application/...]
        files: \.go$
        description: "Run UI tests"
        pass_filenames: false
        always_run: true
      
      - id: go-lint
        name: go-lint
        entry: golangci-lint
        language: system
        args: [run, --fix, --timeout=5m]
        files: \.go$
        description: "Run golangci-lint on Go files"
        pass_filenames: false
        always_run: true
      
      - id: go-coverage
        name: go-coverage
        entry: go test
        language: system
        args: [-coverprofile=coverage.out, -covermode=atomic, ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/..., ./pkg/apis/apps/v1alpha1/...]
        files: \.go$
        description: "Generate test coverage report"
        pass_filenames: false
        always_run: true
      
      - id: go-coverage-check
        name: go-coverage-check
        entry: bash
        language: system
        args: [-c, 'COVERAGE=$(go tool cover -func=coverage.out | grep total | awk "{print $3}" | sed "s/%//"); if (( $(echo "$COVERAGE < 100" | bc -l) )); then echo "Coverage $COVERAGE% is below 100% threshold"; exit 1; else echo "Coverage $COVERAGE% meets 100% threshold"; fi']
        files: \.go$
        description: "Check test coverage meets 100% threshold"
        pass_filenames: false
        always_run: true
      
      - id: go-security
        name: go-security
        entry: gosec
        language: system
        args: [./pkg/controllers/..., ./pkg/apis/...]
        files: \.go$
        description: "Run security scan with gosec"
        pass_filenames: false
        always_run: true
      
      - id: go-race
        name: go-race
        entry: go test
        language: system
        args: [-race, ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/...]
        files: \.go$
        description: "Run race detection tests"
        pass_filenames: false
        always_run: true
      
      - id: go-build
        name: go-build
        entry: go build
        language: system
        args: [-v, ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/..., ./pkg/apis/apps/v1alpha1/...]
        files: \.go$
        description: "Build Go packages"
        pass_filenames: false
        always_run: true
      
      - id: go-mod-tidy
        name: go-mod-tidy
        entry: go mod tidy
        language: system
        files: go\.mod$
        description: "Tidy Go modules"
        pass_filenames: false
        always_run: true
      
      - id: go-mod-verify
        name: go-mod-verify
        entry: go mod verify
        language: system
        files: go\.mod$
        description: "Verify Go modules"
        pass_filenames: false
        always_run: true
      
      - id: go-licenses
        name: go-licenses
        entry: go-licenses
        language: system
        args: [check, ./pkg/controllers/..., ./pkg/apis/...]
        files: \.go$
        description: "Check Go licenses"
        pass_filenames: false
        always_run: true
      
      - id: go-imports
        name: go-imports
        entry: goimports
        language: system
        args: [-w]
        files: \.go$
        description: "Format Go imports with goimports"
      
      - id: go-misspell
        name: go-misspell
        entry: misspell
        language: system
        args: [-w]
        files: \.go$
        description: "Check for common misspellings"
      
      - id: go-ineffassign
        name: go-ineffassign
        entry: ineffassign
        language: system
        files: \.go$
        description: "Check for ineffectual assignments"
      
      - id: go-unused
        name: go-unused
        entry: unused
        language: system
        files: \.go$
        description: "Check for unused code"
      
      - id: go-gocyclo
        name: go-gocyclo
        entry: gocyclo
        language: system
        args: [-over=10]
        files: \.go$
        description: "Check cyclomatic complexity"
      
      - id: go-goconst
        name: go-goconst
        entry: goconst
        language: system
        files: \.go$
        description: "Check for repeated strings that could be constants"
      
      - id: go-gosec
        name: go-gosec
        entry: gosec
        language: system
        args: [-quiet]
        files: \.go$
        description: "Run security scan"
      
      - id: go-golangci-lint
        name: go-golangci-lint
        entry: golangci-lint
        language: system
        args: [run, --timeout=5m, --new-from-rev=HEAD~1]
        files: \.go$
        description: "Run golangci-lint on changed files"
        pass_filenames: true
      
      - id: go-test-race
        name: go-test-race
        entry: go test
        language: system
        args: [-race, -short, ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/...]
        files: \.go$
        description: "Run race detection tests"
        pass_filenames: false
        always_run: true
      
      - id: go-test-cover
        name: go-test-cover
        entry: go test
        language: system
        args: [-coverprofile=coverage.out, -covermode=atomic, ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/..., ./pkg/apis/apps/v1alpha1/...]
        files: \.go$
        description: "Run tests with coverage"
        pass_filenames: false
        always_run: true
      
      - id: go-test-bench
        name: go-test-bench
        entry: go test
        language: system
        args: [-bench=., -benchmem, -run="^$", ./pkg/controllers/application/...]
        files: \.go$
        description: "Run performance benchmarks"
        pass_filenames: false
        always_run: true
      
      - id: go-test-all
        name: go-test-all
        entry: go test
        language: system
        args: [-v, -race, -cover, ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/..., ./pkg/apis/apps/v1alpha1/...]
        files: \.go$
        description: "Run all tests with race detection and coverage"
        pass_filenames: false
        always_run: true
      
      - id: go-test-comprehensive
        name: go-test-comprehensive
        entry: python3
        language: system
        args: [test_comprehensive.py]
        files: \.go$
        description: "Run comprehensive test suite"
        pass_filenames: false
        always_run: true
      
      - id: go-test-makefile
        name: go-test-makefile
        entry: make
        language: system
        args: [-f, Makefile.tests, test-all]
        files: \.go$
        description: "Run tests using Makefile"
        pass_filenames: false
        always_run: true
      
      - id: go-test-verify
        name: go-test-verify
        entry: bash
        language: system
        args: [verify_comprehensive_tests.sh]
        files: \.go$
        description: "Run test verification script"
        pass_filenames: false
        always_run: true
      
      - id: go-test-coverage-report
        name: go-test-coverage-report
        entry: go tool cover
        language: system
        args: [-html=coverage.out, -o, coverage.html]
        files: \.go$
        description: "Generate HTML coverage report"
        pass_filenames: false
        always_run: true
      
      - id: go-test-coverage-func
        name: go-test-coverage-func
        entry: go tool cover
        language: system
        args: [-func=coverage.out, -o, coverage.txt]
        files: \.go$
        description: "Generate function coverage report"
        pass_filenames: false
        always_run: true
      
      - id: go-test-coverage-threshold
        name: go-test-coverage-threshold
        entry: bash
        language: system
        args: [-c, 'COVERAGE=$(go tool cover -func=coverage.out | grep total | awk "{print $3}" | sed "s/%//"); if (( $(echo "$COVERAGE < 100" | bc -l) )); then echo "❌ Coverage $COVERAGE% is below 100% threshold"; exit 1; else echo "✅ Coverage $COVERAGE% meets 100% threshold"; fi']
        files: \.go$
        description: "Verify coverage meets 100% threshold"
        pass_filenames: false
        always_run: true
      
      - id: go-test-performance
        name: go-test-performance
        entry: go test
        language: system
        args: [-bench=., -benchmem, -run="^$", ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/...]
        files: \.go$
        description: "Run performance benchmarks"
        pass_filenames: false
        always_run: true
      
      - id: go-test-memory
        name: go-test-memory
        entry: go test
        language: system
        args: [-memprofile=mem.prof, -run="^$", ./pkg/controllers/application/...]
        files: \.go$
        description: "Run memory profiling"
        pass_filenames: false
        always_run: true
      
      - id: go-test-cpu
        name: go-test-cpu
        entry: go test
        language: system
        args: [-cpuprofile=cpu.prof, -run="^$", ./pkg/controllers/application/...]
        files: \.go$
        description: "Run CPU profiling"
        pass_filenames: false
        always_run: true
      
      - id: go-test-stress
        name: go-test-stress
        entry: go test
        language: system
        args: [-count=10, -run="^$", ./pkg/controllers/application/...]
        files: \.go$
        description: "Run stress tests"
        pass_filenames: false
        always_run: true
      
      - id: go-test-parallel
        name: go-test-parallel
        entry: go test
        language: system
        args: [-parallel=4, -v, ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/...]
        files: \.go$
        description: "Run tests in parallel"
        pass_filenames: false
        always_run: true
      
      - id: go-test-verbose
        name: go-test-verbose
        entry: go test
        language: system
        args: [-v, -race, -cover, ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/..., ./pkg/apis/apps/v1alpha1/...]
        files: \.go$
        description: "Run tests with verbose output"
        pass_filenames: false
        always_run: true
      
      - id: go-test-short
        name: go-test-short
        entry: go test
        language: system
        args: [-short, -v, ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/..., ./pkg/apis/apps/v1alpha1/...]
        files: \.go$
        description: "Run short tests"
        pass_filenames: false
        always_run: true
      
      - id: go-test-quick
        name: go-test-quick
        entry: go test
        language: system
        args: [-short, -v, -race, ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/..., ./pkg/apis/apps/v1alpha1/...]
        files: \.go$
        description: "Run quick tests"
        pass_filenames: false
        always_run: true
      
      - id: go-test-complete
        name: go-test-complete
        entry: go test
        language: system
        args: [-v, -race, -cover, -coverprofile=coverage.out, -covermode=atomic, ./pkg/controllers/application/..., ./pkg/controllers/applicationfailover/..., ./pkg/apis/apps/v1alpha1/...]
        files: \.go$
        description: "Run complete test suite"
        pass_filenames: false
        always_run: true
      
      - id: go-test-final
        name: go-test-final
        entry: bash
        language: system
        args: [-c, 'echo "🧪 Running Final Test Suite..."; go test -v -race -cover -coverprofile=coverage.out -covermode=atomic ./pkg/controllers/application/... ./pkg/controllers/applicationfailover/... ./pkg/apis/apps/v1alpha1/...; COVERAGE=$(go tool cover -func=coverage.out | grep total | awk "{print $3}" | sed "s/%//"); if (( $(echo "$COVERAGE < 100" | bc -l) )); then echo "❌ Coverage $COVERAGE% is below 100% threshold"; exit 1; else echo "✅ Coverage $COVERAGE% meets 100% threshold"; fi; echo "🎉 All tests passed with 100% coverage!"']
        files: \.go$
        description: "Run final comprehensive test suite with 100% coverage verification"
        pass_filenames: false
        always_run: true
