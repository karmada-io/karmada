name: Comprehensive Test Suite

on:
  push:
    branches: [ main, feature/*, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  GO_VERSION: '1.21'
  COVERAGE_THRESHOLD: 100

jobs:
  test:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Run go vet
      run: go vet ./pkg/controllers/... ./pkg/apis/...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
    
    - name: Run golangci-lint
      run: |
        $(go env GOPATH)/bin/golangci-lint run --timeout=5m ./pkg/controllers/... ./pkg/apis/...
    
    - name: Run unit tests
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic \
          ./pkg/controllers/application/... \
          ./pkg/controllers/applicationfailover/... \
          ./pkg/apis/apps/v1alpha1/...
    
    - name: Run integration tests
      run: |
        go test -v -run "Integration" ./pkg/controllers/application/...
    
    - name: Run performance benchmarks
      run: |
        go test -bench=. -benchmem -run="^$" ./pkg/controllers/application/...
    
    - name: Run edge case tests
      run: |
        go test -v -run "Edge" ./pkg/controllers/application/...
    
    - name: Run UI tests
      run: |
        go test -v -run "UI" ./pkg/controllers/application/...
    
    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out -o coverage.txt
    
    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
          echo "Coverage $COVERAGE% is below threshold $COVERAGE_THRESHOLD%"
          exit 1
        else
          echo "Coverage $COVERAGE% meets threshold $COVERAGE_THRESHOLD%"
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.go-version }}
        path: |
          coverage.html
          coverage.txt
          coverage.out
    
    - name: Run security scan
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec ./pkg/controllers/... ./pkg/apis/...
    
    - name: Run dependency check
      run: |
        go install github.com/google/go-licenses@latest
        go-licenses check ./pkg/controllers/... ./pkg/apis/...

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build application
      run: |
        go build -v ./pkg/controllers/application/...
        go build -v ./pkg/controllers/applicationfailover/...
        go build -v ./pkg/apis/apps/v1alpha1/...
    
    - name: Test build artifacts
      run: |
        go test -c ./pkg/controllers/application/...
        go test -c ./pkg/controllers/applicationfailover/...

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, 'perf')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run performance benchmarks
      run: |
        go test -bench=. -benchmem -benchtime=30s -run="^$" \
          ./pkg/controllers/application/... \
          ./pkg/controllers/applicationfailover/...
    
    - name: Run memory profiling
      run: |
        go test -memprofile=mem.prof -run="^$" \
          ./pkg/controllers/application/...
        go tool pprof -text mem.prof > mem-analysis.txt
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          mem.prof
          mem-analysis.txt

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run all tests before release
      run: |
        go test -v -race -cover ./pkg/controllers/... ./pkg/apis/...
    
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes
          - Comprehensive test suite with 100% coverage
          - CI/CD pipeline with automated testing
          - Pre-commit hooks for quality assurance
          - Performance benchmarking and optimization
          - Security scanning and dependency checks
          
          ## Test Results
          - Unit Tests: ✅ 100% coverage
          - Integration Tests: ✅ Complete
          - Performance Tests: ✅ Complete
          - Edge Case Tests: ✅ Complete
          - UI Tests: ✅ Complete
        draft: false
        prerelease: false
