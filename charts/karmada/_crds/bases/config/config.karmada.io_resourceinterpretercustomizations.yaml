---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: resourceinterpretercustomizations.config.karmada.io
spec:
  group: config.karmada.io
  names:
    kind: ResourceInterpreterCustomization
    listKind: ResourceInterpreterCustomizationList
    plural: resourceinterpretercustomizations
    singular: resourceinterpretercustomization
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ResourceInterpreterCustomization describes the configuration
          of a specific resource for Karmada to get the structure. It has higher precedence
          than the default interpreter and the interpreter webhook.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec describes the configuration in detail.
            properties:
              customizations:
                description: Customizations describe the interpretation rules.
                properties:
                  dependencyInterpretation:
                    description: 'DependencyInterpretation describes the rules for
                      Karmada to analyze the dependent resources. Karmada provides
                      built-in rules for several standard Kubernetes types, see: https://karmada.io/docs/userguide/globalview/customizing-resource-interpreter/#interpretdependency
                      If DependencyInterpretation is set, the built-in rules will
                      be ignored.'
                    properties:
                      luaScript:
                        description: "LuaScript holds the Lua script that is used
                          to interpret the dependencies of a specific resource. The
                          script should implement a function as follows: luaScript:
                          > function GetDependencies(desiredObj) dependencies = {}
                          if desiredObj.spec.serviceAccountName ~= nil and desiredObj.spec.serviceAccountName
                          ~= \"default\" then dependency = {} dependency.apiVersion
                          = \"v1\" dependency.kind = \"ServiceAccount\" dependency.name
                          = desiredObj.spec.serviceAccountName dependency.namespace
                          = desiredObj.namespace dependencies[1] = {} dependencies[1]
                          = dependency end return dependencies end \n The content
                          of the LuaScript needs to be a whole function including
                          both declaration and implementation. \n The parameters will
                          be supplied by the system: - desiredObj: the object represents
                          the configuration to be applied to the member cluster. \n
                          The returned value should be expressed by a slice of DependentObjectReference."
                        type: string
                    required:
                    - luaScript
                    type: object
                  healthInterpretation:
                    description: HealthInterpretation describes the health assessment
                      rules by which Karmada can assess the health state of the resource
                      type.
                    properties:
                      luaScript:
                        description: "LuaScript holds the Lua script that is used
                          to assess the health state of a specific resource. The script
                          should implement a function as follows: luaScript: > function
                          InterpretHealth(observedObj) if observedObj.status.readyReplicas
                          == observedObj.spec.replicas then return true end end \n
                          The content of the LuaScript needs to be a whole function
                          including both declaration and implementation. \n The parameters
                          will be supplied by the system: - observedObj: the object
                          represents the configuration that is observed from a specific
                          member cluster. \n The returned boolean value indicates
                          the health status."
                        type: string
                    required:
                    - luaScript
                    type: object
                  replicaResource:
                    description: ReplicaResource describes the rules for Karmada to
                      discover the resource's replica as well as resource requirements.
                      It would be useful for those CRD resources that declare workload
                      types like Deployment. It is usually not needed for Kubernetes
                      native resources(Deployment, Job) as Karmada knows how to discover
                      info from them. But if it is set, the built-in discovery rules
                      will be ignored.
                    properties:
                      luaScript:
                        description: "LuaScript holds the Lua script that is used
                          to discover the resource's replica as well as resource requirements
                          \n The script should implement a function as follows: luaScript:
                          > function GetReplicas(desiredObj) replica = desiredObj.spec.replicas
                          requirement = {} requirement.nodeClaim = {} requirement.nodeClaim.nodeSelector
                          = desiredObj.spec.template.spec.nodeSelector requirement.nodeClaim.tolerations
                          = desiredObj.spec.template.spec.tolerations requirement.resourceRequest
                          = desiredObj.spec.template.spec.containers[1].resources.limits
                          return replica, requirement end \n The content of the LuaScript
                          needs to be a whole function including both declaration
                          and implementation. \n The parameters will be supplied by
                          the system: - desiredObj: the object represents the configuration
                          to be applied to the member cluster. \n The function expects
                          two return values: - replica: the declared replica number
                          - requirement: the resource required by each replica expressed
                          with a ResourceBindingSpec.ReplicaRequirements. The returned
                          values will be set into a ResourceBinding or ClusterResourceBinding."
                        type: string
                    required:
                    - luaScript
                    type: object
                  replicaRevision:
                    description: ReplicaRevision describes the rules for Karmada to
                      revise the resource's replica. It would be useful for those
                      CRD resources that declare workload types like Deployment. It
                      is usually not needed for Kubernetes native resources(Deployment,
                      Job) as Karmada knows how to revise replicas for them. But if
                      it is set, the built-in revision rules will be ignored.
                    properties:
                      luaScript:
                        description: "LuaScript holds the Lua script that is used
                          to revise replicas in the desired specification. The script
                          should implement a function as follows: luaScript: > function
                          ReviseReplica(desiredObj, desiredReplica) desiredObj.spec.replicas
                          = desiredReplica return desiredObj end \n The content of
                          the LuaScript needs to be a whole function including both
                          declaration and implementation. \n The parameters will be
                          supplied by the system: - desiredObj: the object represents
                          the configuration to be applied to the member cluster. -
                          desiredReplica: the replica number should be applied with.
                          \n The returned object should be a revised configuration
                          which will be applied to member cluster eventually."
                        type: string
                    required:
                    - luaScript
                    type: object
                  retention:
                    description: Retention describes the desired behavior that Karmada
                      should react on the changes made by member cluster components.
                      This avoids system running into a meaningless loop that Karmada
                      resource controller and the member cluster component continually
                      applying opposite values of a field. For example, the "replicas"
                      of Deployment might be changed by the HPA controller on member
                      cluster. In this case, Karmada should retain the "replicas"
                      and not try to change it.
                    properties:
                      luaScript:
                        description: "LuaScript holds the Lua script that is used
                          to retain runtime values to the desired specification. \n
                          The script should implement a function as follows: luaScript:
                          > function Retain(desiredObj, observedObj) desiredObj.spec.fieldFoo
                          = observedObj.spec.fieldFoo return desiredObj end \n The
                          content of the LuaScript needs to be a whole function including
                          both declaration and implementation. \n The parameters will
                          be supplied by the system: - desiredObj: the object represents
                          the configuration to be applied to the member cluster. -
                          observedObj: the object represents the configuration that
                          is observed from a specific member cluster. \n The returned
                          object should be a retained configuration which will be
                          applied to member cluster eventually."
                        type: string
                    required:
                    - luaScript
                    type: object
                  statusAggregation:
                    description: 'StatusAggregation describes the rules for Karmada
                      to aggregate status collected from member clusters to resource
                      template. Karmada provides built-in rules for several standard
                      Kubernetes types, see: https://karmada.io/docs/userguide/globalview/customizing-resource-interpreter/#aggregatestatus
                      If StatusAggregation is set, the built-in rules will be ignored.'
                    properties:
                      luaScript:
                        description: "LuaScript holds the Lua script that is used
                          to aggregate decentralized statuses to the desired specification.
                          The script should implement a function as follows: luaScript:
                          > function AggregateStatus(desiredObj, statusItems) for
                          i = 1, #statusItems do desiredObj.status.readyReplicas =
                          desiredObj.status.readyReplicas + items[i].readyReplicas
                          end return desiredObj end \n The content of the LuaScript
                          needs to be a whole function including both declaration
                          and implementation. \n The parameters will be supplied by
                          the system: - desiredObj: the object represents a resource
                          template. - statusItems: the slice of status expressed with
                          AggregatedStatusItem. \n The returned object should be a
                          whole object with status aggregated."
                        type: string
                    required:
                    - luaScript
                    type: object
                  statusReflection:
                    description: 'StatusReflection describes the rules for Karmada
                      to pick the resource''s status. Karmada provides built-in rules
                      for several standard Kubernetes types, see: https://karmada.io/docs/userguide/globalview/customizing-resource-interpreter/#interpretstatus
                      If StatusReflection is set, the built-in rules will be ignored.'
                    properties:
                      luaScript:
                        description: "LuaScript holds the Lua script that is used
                          to get the status from the observed specification. The script
                          should implement a function as follows: luaScript: > function
                          ReflectStatus(observedObj) status = {} status.readyReplicas
                          = observedObj.status.observedObj return status end \n The
                          content of the LuaScript needs to be a whole function including
                          both declaration and implementation. \n The parameters will
                          be supplied by the system: - observedObj: the object represents
                          the configuration that is observed from a specific member
                          cluster. \n The returned status could be the whole status
                          or part of it and will be set into both Work and ResourceBinding(ClusterResourceBinding)."
                        type: string
                    required:
                    - luaScript
                    type: object
                type: object
              target:
                description: CustomizationTarget represents the resource type that
                  the customization applies to.
                properties:
                  apiVersion:
                    description: APIVersion represents the API version of the target
                      resource.
                    type: string
                  kind:
                    description: Kind represents the Kind of target resources.
                    type: string
                required:
                - apiVersion
                - kind
                type: object
            required:
            - customizations
            - target
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
