## Default values for charts.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## @param global karmada global config
global:
  ## @param global.imageRegistry Global Docker image registry
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  imagePullSecrets: []

## @param installCRDs define flag whether to install CRD resources
##
installCRDs: true

kubectl:
  ## @param image.registry karmada kubectl image registry
  ## @param image.repository karmada kubectl image repository
  ## @param image.tag karmada kubectl image tag (immutable tags are recommended)
  ##
  image:
    registry: docker.io
    repository: bitnami/kubectl
    tag: latest
    ## Specify a imagePullPolicy, defaults to 'IfNotPresent'
    pullPolicy: IfNotPresent

## operator manager config
operator:
  ## @param operator.labels
  labels: {}
  ## @param operator.replicaCount target replicas
  replicaCount: 1
  ## @param operator.podAnnotations
  podAnnotations: {}
  ## @param operator.podLabels
  podLabels: {}
  ## @param image.registry operator image registry
  ## @param image.repository operator image repository
  ## @param image.tag operator image tag (immutable tags are recommended)
  ## @param image.pullPolicy operator image pull policy
  ## @param image.pullSecrets Specify docker-registry secret names as an array
  ##
  image:
    registry: docker.io
    repository: karmada/karmada-operator
    tag: latest
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## Example:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## @param.resources
  resources: {}
    # If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  ## @param.nodeSelector
  nodeSelector: {}
  ## @param.affinity
  affinity: {}
  ## @param.tolerations
  tolerations: []
  ## @param scheduler.strategy strategy of the scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 50%

## operator service config
service:
  ## @param service.name
  name: metrics
  ## @param service.type
  type: ClusterIP
  ## @param service.port port of metrics a port
  port: 8080
  annotations: {}

serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  # If true, a ServiceMonitor CRD is created for a prometheus operator.
  # https://github.com/coreos/prometheus-operator
  #
  enabled: false

  namespace: ""
  scheme: http

  # Default values that will be used for all ServiceMonitors created by `targets`
  defaults:
    additionalMetricsRelabels: []
    additionalRelabels: []
    interval: 10s
    labels: {}
    scrapeTimeout: 30s

  targets:
#    - name: example                    # Human readable URL that will appear in Prometheus / AlertManager
#      labels: {}                       # Map of labels for ServiceMonitor. Overrides value set in `defaults`
#      interval: 60s                    # Scraping interval. Overrides value set in `defaults`
#      scrapeTimeout: 60s               # Scrape timeout. Overrides value set in `defaults`
#      additionalMetricsRelabels: []    # Map of metric labels and values to add
#      additionalRelabels: []           # relabelings of metrics
