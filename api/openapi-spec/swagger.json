{
  "swagger": "2.0",
  "info": {
    "description": "Karmada is Open, Multi-Cloud, Multi-Cluster Kubernetes Orchestration System. For more information, please see https://github.com/karmada-io/karmada.",
    "title": "Karmada OpenAPI",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "unversioned"
  },
  "paths": {
    "/apis/": {
      "get": {
        "description": "get available API versions",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apis"
        ],
        "operationId": "getAPIVersions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList"
            }
          }
        }
      }
    },
    "/apis/autoscaling.karmada.io/": {
      "get": {
        "description": "get information of a group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo"
        ],
        "operationId": "getAutoscalingKarmadaIoAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        }
      }
    },
    "/apis/autoscaling.karmada.io/v1alpha1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "getAutoscalingKarmadaIoV1alpha1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        }
      }
    },
    "/apis/autoscaling.karmada.io/v1alpha1/cronfederatedhpas": {
      "get": {
        "description": "list or watch objects of kind CronFederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "listAutoscalingKarmadaIoV1alpha1CronFederatedHPAForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPAList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/federatedhpas": {
      "get": {
        "description": "list or watch objects of kind FederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "listAutoscalingKarmadaIoV1alpha1FederatedHPAForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPAList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/namespaces/{namespace}/cronfederatedhpas": {
      "get": {
        "description": "list or watch objects of kind CronFederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "listAutoscalingKarmadaIoV1alpha1NamespacedCronFederatedHPA",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPAList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "post": {
        "description": "create a CronFederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "createAutoscalingKarmadaIoV1alpha1NamespacedCronFederatedHPA",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "delete": {
        "description": "delete collection of CronFederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteAutoscalingKarmadaIoV1alpha1CollectionNamespacedCronFederatedHPA",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/namespaces/{namespace}/cronfederatedhpas/{name}": {
      "get": {
        "description": "read the specified CronFederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "readAutoscalingKarmadaIoV1alpha1NamespacedCronFederatedHPA",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "put": {
        "description": "replace the specified CronFederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceAutoscalingKarmadaIoV1alpha1NamespacedCronFederatedHPA",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "delete": {
        "description": "delete a CronFederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteAutoscalingKarmadaIoV1alpha1NamespacedCronFederatedHPA",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "patch": {
        "description": "partially update the specified CronFederatedHPA",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "patchAutoscalingKarmadaIoV1alpha1NamespacedCronFederatedHPA",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the CronFederatedHPA",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/namespaces/{namespace}/cronfederatedhpas/{name}/status": {
      "get": {
        "description": "read status of the specified CronFederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "readAutoscalingKarmadaIoV1alpha1NamespacedCronFederatedHPAStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "put": {
        "description": "replace status of the specified CronFederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceAutoscalingKarmadaIoV1alpha1NamespacedCronFederatedHPAStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "patch": {
        "description": "partially update status of the specified CronFederatedHPA",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "patchAutoscalingKarmadaIoV1alpha1NamespacedCronFederatedHPAStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the CronFederatedHPA",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/namespaces/{namespace}/federatedhpas": {
      "get": {
        "description": "list or watch objects of kind FederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "listAutoscalingKarmadaIoV1alpha1NamespacedFederatedHPA",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPAList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "post": {
        "description": "create a FederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "createAutoscalingKarmadaIoV1alpha1NamespacedFederatedHPA",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "delete": {
        "description": "delete collection of FederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteAutoscalingKarmadaIoV1alpha1CollectionNamespacedFederatedHPA",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/namespaces/{namespace}/federatedhpas/{name}": {
      "get": {
        "description": "read the specified FederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "readAutoscalingKarmadaIoV1alpha1NamespacedFederatedHPA",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "put": {
        "description": "replace the specified FederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceAutoscalingKarmadaIoV1alpha1NamespacedFederatedHPA",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "delete": {
        "description": "delete a FederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteAutoscalingKarmadaIoV1alpha1NamespacedFederatedHPA",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "patch": {
        "description": "partially update the specified FederatedHPA",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "patchAutoscalingKarmadaIoV1alpha1NamespacedFederatedHPA",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the FederatedHPA",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/namespaces/{namespace}/federatedhpas/{name}/status": {
      "get": {
        "description": "read status of the specified FederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "readAutoscalingKarmadaIoV1alpha1NamespacedFederatedHPAStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "put": {
        "description": "replace status of the specified FederatedHPA",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceAutoscalingKarmadaIoV1alpha1NamespacedFederatedHPAStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "patch": {
        "description": "partially update status of the specified FederatedHPA",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "patchAutoscalingKarmadaIoV1alpha1NamespacedFederatedHPAStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the FederatedHPA",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/watch/cronfederatedhpas": {
      "get": {
        "description": "watch individual changes to a list of CronFederatedHPA. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "watchAutoscalingKarmadaIoV1alpha1CronFederatedHPAListForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/watch/federatedhpas": {
      "get": {
        "description": "watch individual changes to a list of FederatedHPA. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "watchAutoscalingKarmadaIoV1alpha1FederatedHPAListForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/watch/namespaces/{namespace}/cronfederatedhpas": {
      "get": {
        "description": "watch individual changes to a list of CronFederatedHPA. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "watchAutoscalingKarmadaIoV1alpha1NamespacedCronFederatedHPAList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/watch/namespaces/{namespace}/cronfederatedhpas/{name}": {
      "get": {
        "description": "watch changes to an object of kind CronFederatedHPA. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "watchAutoscalingKarmadaIoV1alpha1NamespacedCronFederatedHPA",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "CronFederatedHPA"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the CronFederatedHPA",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/watch/namespaces/{namespace}/federatedhpas": {
      "get": {
        "description": "watch individual changes to a list of FederatedHPA. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "watchAutoscalingKarmadaIoV1alpha1NamespacedFederatedHPAList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/autoscaling.karmada.io/v1alpha1/watch/namespaces/{namespace}/federatedhpas/{name}": {
      "get": {
        "description": "watch changes to an object of kind FederatedHPA. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscalingKarmadaIo_v1alpha1"
        ],
        "operationId": "watchAutoscalingKarmadaIoV1alpha1NamespacedFederatedHPA",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedHPA"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the FederatedHPA",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/cluster.karmada.io/": {
      "get": {
        "description": "get information of a group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo"
        ],
        "operationId": "getClusterKarmadaIoAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        }
      }
    },
    "/apis/cluster.karmada.io/v1alpha1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "getClusterKarmadaIoV1alpha1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        }
      }
    },
    "/apis/cluster.karmada.io/v1alpha1/clusters": {
      "get": {
        "description": "list or watch objects of kind Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "listClusterKarmadaIoV1alpha1Cluster",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.ClusterList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "Cluster"
        }
      },
      "post": {
        "description": "create a Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "createClusterKarmadaIoV1alpha1Cluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "Cluster"
        }
      },
      "delete": {
        "description": "delete collection of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteClusterKarmadaIoV1alpha1CollectionCluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "Cluster"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.karmada.io/v1alpha1/clusters/{name}": {
      "get": {
        "description": "read the specified Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "readClusterKarmadaIoV1alpha1Cluster",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "Cluster"
        }
      },
      "put": {
        "description": "replace the specified Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceClusterKarmadaIoV1alpha1Cluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "Cluster"
        }
      },
      "delete": {
        "description": "delete a Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteClusterKarmadaIoV1alpha1Cluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "Cluster"
        }
      },
      "patch": {
        "description": "partially update the specified Cluster",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "patchClusterKarmadaIoV1alpha1Cluster",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "Cluster"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Cluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.karmada.io/v1alpha1/clusters/{name}/proxy": {
      "get": {
        "description": "connect GET requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1GetClusterProxy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "put": {
        "description": "connect PUT requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1PutClusterProxy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "post": {
        "description": "connect POST requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1PostClusterProxy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "delete": {
        "description": "connect DELETE requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1DeleteClusterProxy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "options": {
        "description": "connect OPTIONS requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1OptionsClusterProxy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "head": {
        "description": "connect HEAD requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1HeadClusterProxy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "patch": {
        "description": "connect PATCH requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1PatchClusterProxy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterProxyOptions",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/path-RHIocHeS"
        }
      ]
    },
    "/apis/cluster.karmada.io/v1alpha1/clusters/{name}/proxy/{path}": {
      "get": {
        "description": "connect GET requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1GetClusterProxyWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "put": {
        "description": "connect PUT requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1PutClusterProxyWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "post": {
        "description": "connect POST requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1PostClusterProxyWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "delete": {
        "description": "connect DELETE requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1DeleteClusterProxyWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "options": {
        "description": "connect OPTIONS requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1OptionsClusterProxyWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "head": {
        "description": "connect HEAD requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1HeadClusterProxyWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "patch": {
        "description": "connect PATCH requests to proxy of Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "connectClusterKarmadaIoV1alpha1PatchClusterProxyWithPath",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterProxyOptions"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterProxyOptions",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/path-z6Ciiujn"
        },
        {
          "$ref": "#/parameters/path-RHIocHeS"
        }
      ]
    },
    "/apis/cluster.karmada.io/v1alpha1/clusters/{name}/status": {
      "get": {
        "description": "read status of the specified Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "readClusterKarmadaIoV1alpha1ClusterStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "Cluster"
        }
      },
      "put": {
        "description": "replace status of the specified Cluster",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceClusterKarmadaIoV1alpha1ClusterStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "Cluster"
        }
      },
      "patch": {
        "description": "partially update status of the specified Cluster",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "patchClusterKarmadaIoV1alpha1ClusterStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "Cluster"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Cluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/cluster.karmada.io/v1alpha1/watch/clusters": {
      "get": {
        "description": "watch individual changes to a list of Cluster. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "watchClusterKarmadaIoV1alpha1ClusterList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "Cluster"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/cluster.karmada.io/v1alpha1/watch/clusters/{name}": {
      "get": {
        "description": "watch changes to an object of kind Cluster. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterKarmadaIo_v1alpha1"
        ],
        "operationId": "watchClusterKarmadaIoV1alpha1Cluster",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "cluster.karmada.io",
          "version": "v1alpha1",
          "kind": "Cluster"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Cluster",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/config.karmada.io/": {
      "get": {
        "description": "get information of a group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo"
        ],
        "operationId": "getConfigKarmadaIoAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        }
      }
    },
    "/apis/config.karmada.io/v1alpha1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "getConfigKarmadaIoV1alpha1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        }
      }
    },
    "/apis/config.karmada.io/v1alpha1/resourceinterpretercustomizations": {
      "get": {
        "description": "list or watch objects of kind ResourceInterpreterCustomization",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "listConfigKarmadaIoV1alpha1ResourceInterpreterCustomization",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomizationList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterCustomization"
        }
      },
      "post": {
        "description": "create a ResourceInterpreterCustomization",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "createConfigKarmadaIoV1alpha1ResourceInterpreterCustomization",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterCustomization"
        }
      },
      "delete": {
        "description": "delete collection of ResourceInterpreterCustomization",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteConfigKarmadaIoV1alpha1CollectionResourceInterpreterCustomization",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterCustomization"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/config.karmada.io/v1alpha1/resourceinterpretercustomizations/{name}": {
      "get": {
        "description": "read the specified ResourceInterpreterCustomization",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "readConfigKarmadaIoV1alpha1ResourceInterpreterCustomization",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterCustomization"
        }
      },
      "put": {
        "description": "replace the specified ResourceInterpreterCustomization",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceConfigKarmadaIoV1alpha1ResourceInterpreterCustomization",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterCustomization"
        }
      },
      "delete": {
        "description": "delete a ResourceInterpreterCustomization",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteConfigKarmadaIoV1alpha1ResourceInterpreterCustomization",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterCustomization"
        }
      },
      "patch": {
        "description": "partially update the specified ResourceInterpreterCustomization",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "patchConfigKarmadaIoV1alpha1ResourceInterpreterCustomization",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterCustomization"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ResourceInterpreterCustomization",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/config.karmada.io/v1alpha1/resourceinterpretercustomizations/{name}/status": {
      "get": {
        "description": "read status of the specified ResourceInterpreterCustomization",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "readConfigKarmadaIoV1alpha1ResourceInterpreterCustomizationStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterCustomization"
        }
      },
      "put": {
        "description": "replace status of the specified ResourceInterpreterCustomization",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceConfigKarmadaIoV1alpha1ResourceInterpreterCustomizationStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterCustomization"
        }
      },
      "patch": {
        "description": "partially update status of the specified ResourceInterpreterCustomization",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "patchConfigKarmadaIoV1alpha1ResourceInterpreterCustomizationStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterCustomization"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ResourceInterpreterCustomization",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/config.karmada.io/v1alpha1/resourceinterpreterwebhookconfigurations": {
      "get": {
        "description": "list or watch objects of kind ResourceInterpreterWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "listConfigKarmadaIoV1alpha1ResourceInterpreterWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfigurationList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterWebhookConfiguration"
        }
      },
      "post": {
        "description": "create a ResourceInterpreterWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "createConfigKarmadaIoV1alpha1ResourceInterpreterWebhookConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterWebhookConfiguration"
        }
      },
      "delete": {
        "description": "delete collection of ResourceInterpreterWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteConfigKarmadaIoV1alpha1CollectionResourceInterpreterWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterWebhookConfiguration"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/config.karmada.io/v1alpha1/resourceinterpreterwebhookconfigurations/{name}": {
      "get": {
        "description": "read the specified ResourceInterpreterWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "readConfigKarmadaIoV1alpha1ResourceInterpreterWebhookConfiguration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterWebhookConfiguration"
        }
      },
      "put": {
        "description": "replace the specified ResourceInterpreterWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceConfigKarmadaIoV1alpha1ResourceInterpreterWebhookConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterWebhookConfiguration"
        }
      },
      "delete": {
        "description": "delete a ResourceInterpreterWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteConfigKarmadaIoV1alpha1ResourceInterpreterWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterWebhookConfiguration"
        }
      },
      "patch": {
        "description": "partially update the specified ResourceInterpreterWebhookConfiguration",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "patchConfigKarmadaIoV1alpha1ResourceInterpreterWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterWebhookConfiguration"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ResourceInterpreterWebhookConfiguration",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/config.karmada.io/v1alpha1/resourceinterpreterwebhookconfigurations/{name}/status": {
      "get": {
        "description": "read status of the specified ResourceInterpreterWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "readConfigKarmadaIoV1alpha1ResourceInterpreterWebhookConfigurationStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterWebhookConfiguration"
        }
      },
      "put": {
        "description": "replace status of the specified ResourceInterpreterWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceConfigKarmadaIoV1alpha1ResourceInterpreterWebhookConfigurationStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterWebhookConfiguration"
        }
      },
      "patch": {
        "description": "partially update status of the specified ResourceInterpreterWebhookConfiguration",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "patchConfigKarmadaIoV1alpha1ResourceInterpreterWebhookConfigurationStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterWebhookConfiguration"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ResourceInterpreterWebhookConfiguration",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/config.karmada.io/v1alpha1/watch/resourceinterpretercustomizations": {
      "get": {
        "description": "watch individual changes to a list of ResourceInterpreterCustomization. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "watchConfigKarmadaIoV1alpha1ResourceInterpreterCustomizationList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterCustomization"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/config.karmada.io/v1alpha1/watch/resourceinterpretercustomizations/{name}": {
      "get": {
        "description": "watch changes to an object of kind ResourceInterpreterCustomization. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "watchConfigKarmadaIoV1alpha1ResourceInterpreterCustomization",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterCustomization"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ResourceInterpreterCustomization",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/config.karmada.io/v1alpha1/watch/resourceinterpreterwebhookconfigurations": {
      "get": {
        "description": "watch individual changes to a list of ResourceInterpreterWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "watchConfigKarmadaIoV1alpha1ResourceInterpreterWebhookConfigurationList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterWebhookConfiguration"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/config.karmada.io/v1alpha1/watch/resourceinterpreterwebhookconfigurations/{name}": {
      "get": {
        "description": "watch changes to an object of kind ResourceInterpreterWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "configKarmadaIo_v1alpha1"
        ],
        "operationId": "watchConfigKarmadaIoV1alpha1ResourceInterpreterWebhookConfiguration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "config.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceInterpreterWebhookConfiguration"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ResourceInterpreterWebhookConfiguration",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/networking.karmada.io/": {
      "get": {
        "description": "get information of a group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo"
        ],
        "operationId": "getNetworkingKarmadaIoAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        }
      }
    },
    "/apis/networking.karmada.io/v1alpha1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "getNetworkingKarmadaIoV1alpha1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        }
      }
    },
    "/apis/networking.karmada.io/v1alpha1/multiclusteringresses": {
      "get": {
        "description": "list or watch objects of kind MultiClusterIngress",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "listNetworkingKarmadaIoV1alpha1MultiClusterIngressForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngressList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/multiclusterservices": {
      "get": {
        "description": "list or watch objects of kind MultiClusterService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "listNetworkingKarmadaIoV1alpha1MultiClusterServiceForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterServiceList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/namespaces/{namespace}/multiclusteringresses": {
      "get": {
        "description": "list or watch objects of kind MultiClusterIngress",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "listNetworkingKarmadaIoV1alpha1NamespacedMultiClusterIngress",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngressList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "post": {
        "description": "create a MultiClusterIngress",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "createNetworkingKarmadaIoV1alpha1NamespacedMultiClusterIngress",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "delete": {
        "description": "delete collection of MultiClusterIngress",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteNetworkingKarmadaIoV1alpha1CollectionNamespacedMultiClusterIngress",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/namespaces/{namespace}/multiclusteringresses/{name}": {
      "get": {
        "description": "read the specified MultiClusterIngress",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "readNetworkingKarmadaIoV1alpha1NamespacedMultiClusterIngress",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "put": {
        "description": "replace the specified MultiClusterIngress",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceNetworkingKarmadaIoV1alpha1NamespacedMultiClusterIngress",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "delete": {
        "description": "delete a MultiClusterIngress",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteNetworkingKarmadaIoV1alpha1NamespacedMultiClusterIngress",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "patch": {
        "description": "partially update the specified MultiClusterIngress",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "patchNetworkingKarmadaIoV1alpha1NamespacedMultiClusterIngress",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MultiClusterIngress",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/namespaces/{namespace}/multiclusteringresses/{name}/status": {
      "get": {
        "description": "read status of the specified MultiClusterIngress",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "readNetworkingKarmadaIoV1alpha1NamespacedMultiClusterIngressStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "put": {
        "description": "replace status of the specified MultiClusterIngress",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceNetworkingKarmadaIoV1alpha1NamespacedMultiClusterIngressStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "patch": {
        "description": "partially update status of the specified MultiClusterIngress",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "patchNetworkingKarmadaIoV1alpha1NamespacedMultiClusterIngressStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MultiClusterIngress",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/namespaces/{namespace}/multiclusterservices": {
      "get": {
        "description": "list or watch objects of kind MultiClusterService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "listNetworkingKarmadaIoV1alpha1NamespacedMultiClusterService",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterServiceList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "post": {
        "description": "create a MultiClusterService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "createNetworkingKarmadaIoV1alpha1NamespacedMultiClusterService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "delete": {
        "description": "delete collection of MultiClusterService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteNetworkingKarmadaIoV1alpha1CollectionNamespacedMultiClusterService",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/namespaces/{namespace}/multiclusterservices/{name}": {
      "get": {
        "description": "read the specified MultiClusterService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "readNetworkingKarmadaIoV1alpha1NamespacedMultiClusterService",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "put": {
        "description": "replace the specified MultiClusterService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceNetworkingKarmadaIoV1alpha1NamespacedMultiClusterService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "delete": {
        "description": "delete a MultiClusterService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteNetworkingKarmadaIoV1alpha1NamespacedMultiClusterService",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "patch": {
        "description": "partially update the specified MultiClusterService",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "patchNetworkingKarmadaIoV1alpha1NamespacedMultiClusterService",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MultiClusterService",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/namespaces/{namespace}/multiclusterservices/{name}/status": {
      "get": {
        "description": "read status of the specified MultiClusterService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "readNetworkingKarmadaIoV1alpha1NamespacedMultiClusterServiceStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "put": {
        "description": "replace status of the specified MultiClusterService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceNetworkingKarmadaIoV1alpha1NamespacedMultiClusterServiceStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "patch": {
        "description": "partially update status of the specified MultiClusterService",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "patchNetworkingKarmadaIoV1alpha1NamespacedMultiClusterServiceStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MultiClusterService",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/watch/multiclusteringresses": {
      "get": {
        "description": "watch individual changes to a list of MultiClusterIngress. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "watchNetworkingKarmadaIoV1alpha1MultiClusterIngressListForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/watch/multiclusterservices": {
      "get": {
        "description": "watch individual changes to a list of MultiClusterService. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "watchNetworkingKarmadaIoV1alpha1MultiClusterServiceListForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/watch/namespaces/{namespace}/multiclusteringresses": {
      "get": {
        "description": "watch individual changes to a list of MultiClusterIngress. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "watchNetworkingKarmadaIoV1alpha1NamespacedMultiClusterIngressList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/watch/namespaces/{namespace}/multiclusteringresses/{name}": {
      "get": {
        "description": "watch changes to an object of kind MultiClusterIngress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "watchNetworkingKarmadaIoV1alpha1NamespacedMultiClusterIngress",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterIngress"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MultiClusterIngress",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/watch/namespaces/{namespace}/multiclusterservices": {
      "get": {
        "description": "watch individual changes to a list of MultiClusterService. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "watchNetworkingKarmadaIoV1alpha1NamespacedMultiClusterServiceList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/networking.karmada.io/v1alpha1/watch/namespaces/{namespace}/multiclusterservices/{name}": {
      "get": {
        "description": "watch changes to an object of kind MultiClusterService. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networkingKarmadaIo_v1alpha1"
        ],
        "operationId": "watchNetworkingKarmadaIoV1alpha1NamespacedMultiClusterService",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.karmada.io",
          "version": "v1alpha1",
          "kind": "MultiClusterService"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the MultiClusterService",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/": {
      "get": {
        "description": "get information of a group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo"
        ],
        "operationId": "getPolicyKarmadaIoAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        }
      }
    },
    "/apis/policy.karmada.io/v1alpha1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "getPolicyKarmadaIoV1alpha1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        }
      }
    },
    "/apis/policy.karmada.io/v1alpha1/clusteroverridepolicies": {
      "get": {
        "description": "list or watch objects of kind ClusterOverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "listPolicyKarmadaIoV1alpha1ClusterOverridePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicyList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterOverridePolicy"
        }
      },
      "post": {
        "description": "create a ClusterOverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "createPolicyKarmadaIoV1alpha1ClusterOverridePolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterOverridePolicy"
        }
      },
      "delete": {
        "description": "delete collection of ClusterOverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "deletePolicyKarmadaIoV1alpha1CollectionClusterOverridePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterOverridePolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/clusteroverridepolicies/{name}": {
      "get": {
        "description": "read the specified ClusterOverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "readPolicyKarmadaIoV1alpha1ClusterOverridePolicy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterOverridePolicy"
        }
      },
      "put": {
        "description": "replace the specified ClusterOverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "replacePolicyKarmadaIoV1alpha1ClusterOverridePolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterOverridePolicy"
        }
      },
      "delete": {
        "description": "delete a ClusterOverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "deletePolicyKarmadaIoV1alpha1ClusterOverridePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterOverridePolicy"
        }
      },
      "patch": {
        "description": "partially update the specified ClusterOverridePolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "patchPolicyKarmadaIoV1alpha1ClusterOverridePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterOverridePolicy"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterOverridePolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/clusteroverridepolicies/{name}/status": {
      "get": {
        "description": "read status of the specified ClusterOverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "readPolicyKarmadaIoV1alpha1ClusterOverridePolicyStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterOverridePolicy"
        }
      },
      "put": {
        "description": "replace status of the specified ClusterOverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "replacePolicyKarmadaIoV1alpha1ClusterOverridePolicyStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterOverridePolicy"
        }
      },
      "patch": {
        "description": "partially update status of the specified ClusterOverridePolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "patchPolicyKarmadaIoV1alpha1ClusterOverridePolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterOverridePolicy"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterOverridePolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/clusterpropagationpolicies": {
      "get": {
        "description": "list or watch objects of kind ClusterPropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "listPolicyKarmadaIoV1alpha1ClusterPropagationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicyList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterPropagationPolicy"
        }
      },
      "post": {
        "description": "create a ClusterPropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "createPolicyKarmadaIoV1alpha1ClusterPropagationPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterPropagationPolicy"
        }
      },
      "delete": {
        "description": "delete collection of ClusterPropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "deletePolicyKarmadaIoV1alpha1CollectionClusterPropagationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterPropagationPolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/clusterpropagationpolicies/{name}": {
      "get": {
        "description": "read the specified ClusterPropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "readPolicyKarmadaIoV1alpha1ClusterPropagationPolicy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterPropagationPolicy"
        }
      },
      "put": {
        "description": "replace the specified ClusterPropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "replacePolicyKarmadaIoV1alpha1ClusterPropagationPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterPropagationPolicy"
        }
      },
      "delete": {
        "description": "delete a ClusterPropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "deletePolicyKarmadaIoV1alpha1ClusterPropagationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterPropagationPolicy"
        }
      },
      "patch": {
        "description": "partially update the specified ClusterPropagationPolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "patchPolicyKarmadaIoV1alpha1ClusterPropagationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterPropagationPolicy"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterPropagationPolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/clusterpropagationpolicies/{name}/status": {
      "get": {
        "description": "read status of the specified ClusterPropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "readPolicyKarmadaIoV1alpha1ClusterPropagationPolicyStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterPropagationPolicy"
        }
      },
      "put": {
        "description": "replace status of the specified ClusterPropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "replacePolicyKarmadaIoV1alpha1ClusterPropagationPolicyStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterPropagationPolicy"
        }
      },
      "patch": {
        "description": "partially update status of the specified ClusterPropagationPolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "patchPolicyKarmadaIoV1alpha1ClusterPropagationPolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterPropagationPolicy"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterPropagationPolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/federatedresourcequotas": {
      "get": {
        "description": "list or watch objects of kind FederatedResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "listPolicyKarmadaIoV1alpha1FederatedResourceQuotaForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuotaList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/namespaces/{namespace}/federatedresourcequotas": {
      "get": {
        "description": "list or watch objects of kind FederatedResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "listPolicyKarmadaIoV1alpha1NamespacedFederatedResourceQuota",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuotaList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "post": {
        "description": "create a FederatedResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "createPolicyKarmadaIoV1alpha1NamespacedFederatedResourceQuota",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "delete": {
        "description": "delete collection of FederatedResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "deletePolicyKarmadaIoV1alpha1CollectionNamespacedFederatedResourceQuota",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/namespaces/{namespace}/federatedresourcequotas/{name}": {
      "get": {
        "description": "read the specified FederatedResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "readPolicyKarmadaIoV1alpha1NamespacedFederatedResourceQuota",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "put": {
        "description": "replace the specified FederatedResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "replacePolicyKarmadaIoV1alpha1NamespacedFederatedResourceQuota",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "delete": {
        "description": "delete a FederatedResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "deletePolicyKarmadaIoV1alpha1NamespacedFederatedResourceQuota",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "patch": {
        "description": "partially update the specified FederatedResourceQuota",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "patchPolicyKarmadaIoV1alpha1NamespacedFederatedResourceQuota",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the FederatedResourceQuota",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/namespaces/{namespace}/federatedresourcequotas/{name}/status": {
      "get": {
        "description": "read status of the specified FederatedResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "readPolicyKarmadaIoV1alpha1NamespacedFederatedResourceQuotaStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "put": {
        "description": "replace status of the specified FederatedResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "replacePolicyKarmadaIoV1alpha1NamespacedFederatedResourceQuotaStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "patch": {
        "description": "partially update status of the specified FederatedResourceQuota",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "patchPolicyKarmadaIoV1alpha1NamespacedFederatedResourceQuotaStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the FederatedResourceQuota",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/namespaces/{namespace}/overridepolicies": {
      "get": {
        "description": "list or watch objects of kind OverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "listPolicyKarmadaIoV1alpha1NamespacedOverridePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicyList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "post": {
        "description": "create an OverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "createPolicyKarmadaIoV1alpha1NamespacedOverridePolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "delete": {
        "description": "delete collection of OverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "deletePolicyKarmadaIoV1alpha1CollectionNamespacedOverridePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/namespaces/{namespace}/overridepolicies/{name}": {
      "get": {
        "description": "read the specified OverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "readPolicyKarmadaIoV1alpha1NamespacedOverridePolicy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "put": {
        "description": "replace the specified OverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "replacePolicyKarmadaIoV1alpha1NamespacedOverridePolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "delete": {
        "description": "delete an OverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "deletePolicyKarmadaIoV1alpha1NamespacedOverridePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "patch": {
        "description": "partially update the specified OverridePolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "patchPolicyKarmadaIoV1alpha1NamespacedOverridePolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the OverridePolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/namespaces/{namespace}/overridepolicies/{name}/status": {
      "get": {
        "description": "read status of the specified OverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "readPolicyKarmadaIoV1alpha1NamespacedOverridePolicyStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "put": {
        "description": "replace status of the specified OverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "replacePolicyKarmadaIoV1alpha1NamespacedOverridePolicyStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "patch": {
        "description": "partially update status of the specified OverridePolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "patchPolicyKarmadaIoV1alpha1NamespacedOverridePolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the OverridePolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/namespaces/{namespace}/propagationpolicies": {
      "get": {
        "description": "list or watch objects of kind PropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "listPolicyKarmadaIoV1alpha1NamespacedPropagationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicyList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "post": {
        "description": "create a PropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "createPolicyKarmadaIoV1alpha1NamespacedPropagationPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "delete": {
        "description": "delete collection of PropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "deletePolicyKarmadaIoV1alpha1CollectionNamespacedPropagationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/namespaces/{namespace}/propagationpolicies/{name}": {
      "get": {
        "description": "read the specified PropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "readPolicyKarmadaIoV1alpha1NamespacedPropagationPolicy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "put": {
        "description": "replace the specified PropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "replacePolicyKarmadaIoV1alpha1NamespacedPropagationPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "delete": {
        "description": "delete a PropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "deletePolicyKarmadaIoV1alpha1NamespacedPropagationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "patch": {
        "description": "partially update the specified PropagationPolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "patchPolicyKarmadaIoV1alpha1NamespacedPropagationPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PropagationPolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/namespaces/{namespace}/propagationpolicies/{name}/status": {
      "get": {
        "description": "read status of the specified PropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "readPolicyKarmadaIoV1alpha1NamespacedPropagationPolicyStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "put": {
        "description": "replace status of the specified PropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "replacePolicyKarmadaIoV1alpha1NamespacedPropagationPolicyStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "patch": {
        "description": "partially update status of the specified PropagationPolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "patchPolicyKarmadaIoV1alpha1NamespacedPropagationPolicyStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PropagationPolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/overridepolicies": {
      "get": {
        "description": "list or watch objects of kind OverridePolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "listPolicyKarmadaIoV1alpha1OverridePolicyForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicyList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/propagationpolicies": {
      "get": {
        "description": "list or watch objects of kind PropagationPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "listPolicyKarmadaIoV1alpha1PropagationPolicyForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicyList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/clusteroverridepolicies": {
      "get": {
        "description": "watch individual changes to a list of ClusterOverridePolicy. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1ClusterOverridePolicyList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterOverridePolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/clusteroverridepolicies/{name}": {
      "get": {
        "description": "watch changes to an object of kind ClusterOverridePolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1ClusterOverridePolicy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterOverridePolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterOverridePolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/clusterpropagationpolicies": {
      "get": {
        "description": "watch individual changes to a list of ClusterPropagationPolicy. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1ClusterPropagationPolicyList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterPropagationPolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/clusterpropagationpolicies/{name}": {
      "get": {
        "description": "watch changes to an object of kind ClusterPropagationPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1ClusterPropagationPolicy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "ClusterPropagationPolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterPropagationPolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/federatedresourcequotas": {
      "get": {
        "description": "watch individual changes to a list of FederatedResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1FederatedResourceQuotaListForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/namespaces/{namespace}/federatedresourcequotas": {
      "get": {
        "description": "watch individual changes to a list of FederatedResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1NamespacedFederatedResourceQuotaList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/namespaces/{namespace}/federatedresourcequotas/{name}": {
      "get": {
        "description": "watch changes to an object of kind FederatedResourceQuota. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1NamespacedFederatedResourceQuota",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "FederatedResourceQuota"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the FederatedResourceQuota",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/namespaces/{namespace}/overridepolicies": {
      "get": {
        "description": "watch individual changes to a list of OverridePolicy. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1NamespacedOverridePolicyList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/namespaces/{namespace}/overridepolicies/{name}": {
      "get": {
        "description": "watch changes to an object of kind OverridePolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1NamespacedOverridePolicy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the OverridePolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/namespaces/{namespace}/propagationpolicies": {
      "get": {
        "description": "watch individual changes to a list of PropagationPolicy. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1NamespacedPropagationPolicyList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/namespaces/{namespace}/propagationpolicies/{name}": {
      "get": {
        "description": "watch changes to an object of kind PropagationPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1NamespacedPropagationPolicy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the PropagationPolicy",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/overridepolicies": {
      "get": {
        "description": "watch individual changes to a list of OverridePolicy. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1OverridePolicyListForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "OverridePolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/policy.karmada.io/v1alpha1/watch/propagationpolicies": {
      "get": {
        "description": "watch individual changes to a list of PropagationPolicy. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policyKarmadaIo_v1alpha1"
        ],
        "operationId": "watchPolicyKarmadaIoV1alpha1PropagationPolicyListForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "policy.karmada.io",
          "version": "v1alpha1",
          "kind": "PropagationPolicy"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/search.karmada.io/": {
      "get": {
        "description": "get information of a group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo"
        ],
        "operationId": "getSearchKarmadaIoAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        }
      }
    },
    "/apis/search.karmada.io/v1alpha1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "getSearchKarmadaIoV1alpha1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        }
      }
    },
    "/apis/search.karmada.io/v1alpha1/resourceregistries": {
      "get": {
        "description": "list or watch objects of kind ResourceRegistry",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "listSearchKarmadaIoV1alpha1ResourceRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistryList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "search.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceRegistry"
        }
      },
      "post": {
        "description": "create a ResourceRegistry",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "createSearchKarmadaIoV1alpha1ResourceRegistry",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "search.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceRegistry"
        }
      },
      "delete": {
        "description": "delete collection of ResourceRegistry",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteSearchKarmadaIoV1alpha1CollectionResourceRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "search.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceRegistry"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/search.karmada.io/v1alpha1/resourceregistries/{name}": {
      "get": {
        "description": "read the specified ResourceRegistry",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "readSearchKarmadaIoV1alpha1ResourceRegistry",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "search.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceRegistry"
        }
      },
      "put": {
        "description": "replace the specified ResourceRegistry",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceSearchKarmadaIoV1alpha1ResourceRegistry",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "search.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceRegistry"
        }
      },
      "delete": {
        "description": "delete a ResourceRegistry",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteSearchKarmadaIoV1alpha1ResourceRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "search.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceRegistry"
        }
      },
      "patch": {
        "description": "partially update the specified ResourceRegistry",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "patchSearchKarmadaIoV1alpha1ResourceRegistry",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "search.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceRegistry"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ResourceRegistry",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/search.karmada.io/v1alpha1/resourceregistries/{name}/status": {
      "get": {
        "description": "read status of the specified ResourceRegistry",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "readSearchKarmadaIoV1alpha1ResourceRegistryStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "search.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceRegistry"
        }
      },
      "put": {
        "description": "replace status of the specified ResourceRegistry",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceSearchKarmadaIoV1alpha1ResourceRegistryStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "search.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceRegistry"
        }
      },
      "patch": {
        "description": "partially update status of the specified ResourceRegistry",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "patchSearchKarmadaIoV1alpha1ResourceRegistryStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "search.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceRegistry"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ResourceRegistry",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/search.karmada.io/v1alpha1/watch/resourceregistries": {
      "get": {
        "description": "watch individual changes to a list of ResourceRegistry. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "watchSearchKarmadaIoV1alpha1ResourceRegistryList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "search.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceRegistry"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/search.karmada.io/v1alpha1/watch/resourceregistries/{name}": {
      "get": {
        "description": "watch changes to an object of kind ResourceRegistry. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "searchKarmadaIo_v1alpha1"
        ],
        "operationId": "watchSearchKarmadaIoV1alpha1ResourceRegistry",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "search.karmada.io",
          "version": "v1alpha1",
          "kind": "ResourceRegistry"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ResourceRegistry",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/work.karmada.io/": {
      "get": {
        "description": "get information of a group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo"
        ],
        "operationId": "getWorkKarmadaIoAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        }
      }
    },
    "/apis/work.karmada.io/v1alpha1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "getWorkKarmadaIoV1alpha1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        }
      }
    },
    "/apis/work.karmada.io/v1alpha1/namespaces/{namespace}/works": {
      "get": {
        "description": "list or watch objects of kind Work",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "listWorkKarmadaIoV1alpha1NamespacedWork",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.WorkList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "post": {
        "description": "create a Work",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "createWorkKarmadaIoV1alpha1NamespacedWork",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "delete": {
        "description": "delete collection of Work",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteWorkKarmadaIoV1alpha1CollectionNamespacedWork",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha1/namespaces/{namespace}/works/{name}": {
      "get": {
        "description": "read the specified Work",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "readWorkKarmadaIoV1alpha1NamespacedWork",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "put": {
        "description": "replace the specified Work",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceWorkKarmadaIoV1alpha1NamespacedWork",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "delete": {
        "description": "delete a Work",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "deleteWorkKarmadaIoV1alpha1NamespacedWork",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "patch": {
        "description": "partially update the specified Work",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "patchWorkKarmadaIoV1alpha1NamespacedWork",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Work",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha1/namespaces/{namespace}/works/{name}/status": {
      "get": {
        "description": "read status of the specified Work",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "readWorkKarmadaIoV1alpha1NamespacedWorkStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "put": {
        "description": "replace status of the specified Work",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "replaceWorkKarmadaIoV1alpha1NamespacedWorkStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "patch": {
        "description": "partially update status of the specified Work",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "patchWorkKarmadaIoV1alpha1NamespacedWorkStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Work",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha1/watch/namespaces/{namespace}/works": {
      "get": {
        "description": "watch individual changes to a list of Work. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "watchWorkKarmadaIoV1alpha1NamespacedWorkList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha1/watch/namespaces/{namespace}/works/{name}": {
      "get": {
        "description": "watch changes to an object of kind Work. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "watchWorkKarmadaIoV1alpha1NamespacedWork",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Work",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha1/watch/works": {
      "get": {
        "description": "watch individual changes to a list of Work. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "watchWorkKarmadaIoV1alpha1WorkListForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha1/works": {
      "get": {
        "description": "list or watch objects of kind Work",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha1"
        ],
        "operationId": "listWorkKarmadaIoV1alpha1WorkForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.WorkList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha1",
          "kind": "Work"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha2/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "getWorkKarmadaIoV1alpha2APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        }
      }
    },
    "/apis/work.karmada.io/v1alpha2/clusterresourcebindings": {
      "get": {
        "description": "list or watch objects of kind ClusterResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "listWorkKarmadaIoV1alpha2ClusterResourceBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBindingList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ClusterResourceBinding"
        }
      },
      "post": {
        "description": "create a ClusterResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "createWorkKarmadaIoV1alpha2ClusterResourceBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ClusterResourceBinding"
        }
      },
      "delete": {
        "description": "delete collection of ClusterResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "deleteWorkKarmadaIoV1alpha2CollectionClusterResourceBinding",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ClusterResourceBinding"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha2/clusterresourcebindings/{name}": {
      "get": {
        "description": "read the specified ClusterResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "readWorkKarmadaIoV1alpha2ClusterResourceBinding",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ClusterResourceBinding"
        }
      },
      "put": {
        "description": "replace the specified ClusterResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "replaceWorkKarmadaIoV1alpha2ClusterResourceBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ClusterResourceBinding"
        }
      },
      "delete": {
        "description": "delete a ClusterResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "deleteWorkKarmadaIoV1alpha2ClusterResourceBinding",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ClusterResourceBinding"
        }
      },
      "patch": {
        "description": "partially update the specified ClusterResourceBinding",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "patchWorkKarmadaIoV1alpha2ClusterResourceBinding",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ClusterResourceBinding"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterResourceBinding",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha2/clusterresourcebindings/{name}/status": {
      "get": {
        "description": "read status of the specified ClusterResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "readWorkKarmadaIoV1alpha2ClusterResourceBindingStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ClusterResourceBinding"
        }
      },
      "put": {
        "description": "replace status of the specified ClusterResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "replaceWorkKarmadaIoV1alpha2ClusterResourceBindingStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ClusterResourceBinding"
        }
      },
      "patch": {
        "description": "partially update status of the specified ClusterResourceBinding",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "patchWorkKarmadaIoV1alpha2ClusterResourceBindingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ClusterResourceBinding"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterResourceBinding",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha2/namespaces/{namespace}/resourcebindings": {
      "get": {
        "description": "list or watch objects of kind ResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "listWorkKarmadaIoV1alpha2NamespacedResourceBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          },
          {
            "$ref": "#/parameters/watch-XNNPZGbK"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBindingList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "post": {
        "description": "create a ResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "createWorkKarmadaIoV1alpha2NamespacedResourceBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "delete": {
        "description": "delete collection of ResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "deleteWorkKarmadaIoV1alpha2CollectionNamespacedResourceBinding",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "$ref": "#/parameters/continue-QfD61s0i"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldSelector-xIcQKXFG"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/labelSelector-5Zw57w4C"
          },
          {
            "$ref": "#/parameters/limit-1NfNmdNH"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          },
          {
            "$ref": "#/parameters/resourceVersion-5WAnf1kx"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
          },
          {
            "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
          },
          {
            "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha2/namespaces/{namespace}/resourcebindings/{name}": {
      "get": {
        "description": "read the specified ResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "readWorkKarmadaIoV1alpha2NamespacedResourceBinding",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "put": {
        "description": "replace the specified ResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "replaceWorkKarmadaIoV1alpha2NamespacedResourceBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "delete": {
        "description": "delete a ResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "deleteWorkKarmadaIoV1alpha2NamespacedResourceBinding",
        "parameters": [
          {
            "$ref": "#/parameters/body-2Y1dVQaQ"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds--K5HaBOS"
          },
          {
            "$ref": "#/parameters/orphanDependents-uRB25kX5"
          },
          {
            "$ref": "#/parameters/propagationPolicy-6jk3prlO"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "patch": {
        "description": "partially update the specified ResourceBinding",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "patchWorkKarmadaIoV1alpha2NamespacedResourceBinding",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ResourceBinding",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha2/namespaces/{namespace}/resourcebindings/{name}/status": {
      "get": {
        "description": "read status of the specified ResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "readWorkKarmadaIoV1alpha2NamespacedResourceBindingStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "put": {
        "description": "replace status of the specified ResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "replaceWorkKarmadaIoV1alpha2NamespacedResourceBindingStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-Qy4HdaTW"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "patch": {
        "description": "partially update status of the specified ResourceBinding",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "patchWorkKarmadaIoV1alpha2NamespacedResourceBindingStatus",
        "parameters": [
          {
            "$ref": "#/parameters/body-78PwaGsr"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "$ref": "#/parameters/fieldManager-7c6nTn1T"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "name": "fieldValidation",
            "in": "query"
          },
          {
            "$ref": "#/parameters/force-tOGGb0Yi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ResourceBinding",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha2/resourcebindings": {
      "get": {
        "description": "list or watch objects of kind ResourceBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "listWorkKarmadaIoV1alpha2ResourceBindingForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBindingList"
            }
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha2/watch/clusterresourcebindings": {
      "get": {
        "description": "watch individual changes to a list of ClusterResourceBinding. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "watchWorkKarmadaIoV1alpha2ClusterResourceBindingList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ClusterResourceBinding"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha2/watch/clusterresourcebindings/{name}": {
      "get": {
        "description": "watch changes to an object of kind ClusterResourceBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "watchWorkKarmadaIoV1alpha2ClusterResourceBinding",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ClusterResourceBinding"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ClusterResourceBinding",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha2/watch/namespaces/{namespace}/resourcebindings": {
      "get": {
        "description": "watch individual changes to a list of ResourceBinding. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "watchWorkKarmadaIoV1alpha2NamespacedResourceBindingList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha2/watch/namespaces/{namespace}/resourcebindings/{name}": {
      "get": {
        "description": "watch changes to an object of kind ResourceBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "watchWorkKarmadaIoV1alpha2NamespacedResourceBinding",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the ResourceBinding",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "$ref": "#/parameters/namespace-vgWSWtn3"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    },
    "/apis/work.karmada.io/v1alpha2/watch/resourcebindings": {
      "get": {
        "description": "watch individual changes to a list of ResourceBinding. deprecated: use the 'watch' parameter with a list operation instead.",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "workKarmadaIo_v1alpha2"
        ],
        "operationId": "watchWorkKarmadaIoV1alpha2ResourceBindingListForAllNamespaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            }
          }
        },
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "work.karmada.io",
          "version": "v1alpha2",
          "kind": "ResourceBinding"
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/allowWatchBookmarks-HC2hJt-J"
        },
        {
          "$ref": "#/parameters/continue-QfD61s0i"
        },
        {
          "$ref": "#/parameters/fieldSelector-xIcQKXFG"
        },
        {
          "$ref": "#/parameters/labelSelector-5Zw57w4C"
        },
        {
          "$ref": "#/parameters/limit-1NfNmdNH"
        },
        {
          "$ref": "#/parameters/pretty-nN7o5FEq"
        },
        {
          "$ref": "#/parameters/resourceVersion-5WAnf1kx"
        },
        {
          "$ref": "#/parameters/resourceVersionMatch-t8XhRHeC"
        },
        {
          "$ref": "#/parameters/sendInitialEvents-rLXlEK_k"
        },
        {
          "$ref": "#/parameters/timeoutSeconds-yvYezaOC"
        },
        {
          "$ref": "#/parameters/watch-XNNPZGbK"
        }
      ]
    }
  },
  "definitions": {
    "com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA": {
      "description": "CronFederatedHPA represents a collection of repeating schedule to scale replica number of a specific workload. It can scale any resource implementing the scale subresource as well as FederatedHPA.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the specification of the CronFederatedHPA.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPASpec"
        },
        "status": {
          "description": "Status is the current status of the CronFederatedHPA.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPAStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling.karmada.io",
          "kind": "CronFederatedHPA",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPAList": {
      "description": "CronFederatedHPAList contains a list of CronFederatedHPA.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPA"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling.karmada.io",
          "kind": "CronFederatedHPAList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPARule": {
      "description": "CronFederatedHPARule declares a schedule as well as scale actions.",
      "type": "object",
      "required": [
        "name",
        "schedule"
      ],
      "properties": {
        "failedHistoryLimit": {
          "description": "FailedHistoryLimit represents the count of failed execution items for each rule. The value must be a positive integer. It defaults to 3.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the rule. Each rule in a CronFederatedHPA must have a unique name.\n\nNote: the name will be used as an identifier to record its execution history. Changing the name will be considered as deleting the old rule and adding a new rule, that means the original execution history will be discarded.",
          "type": "string",
          "default": ""
        },
        "schedule": {
          "description": "Schedule is the cron expression that represents a periodical time. The syntax follows https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax.",
          "type": "string",
          "default": ""
        },
        "successfulHistoryLimit": {
          "description": "SuccessfulHistoryLimit represents the count of successful execution items for each rule. The value must be a positive integer. It defaults to 3.",
          "type": "integer",
          "format": "int32"
        },
        "suspend": {
          "description": "Suspend tells the controller to suspend subsequent executions. Defaults to false.",
          "type": "boolean"
        },
        "targetMaxReplicas": {
          "description": "TargetMaxReplicas is the target MaxReplicas to be set for FederatedHPA. Only needed when referencing resource is FederatedHPA. TargetMinReplicas and TargetMaxReplicas can be specified together or either one can be specified alone. nil means the MaxReplicas(.spec.maxReplicas) of the referencing FederatedHPA will not be updated.",
          "type": "integer",
          "format": "int32"
        },
        "targetMinReplicas": {
          "description": "TargetMinReplicas is the target MinReplicas to be set for FederatedHPA. Only needed when referencing resource is FederatedHPA. TargetMinReplicas and TargetMaxReplicas can be specified together or either one can be specified alone. nil means the MinReplicas(.spec.minReplicas) of the referencing FederatedHPA will not be updated.",
          "type": "integer",
          "format": "int32"
        },
        "targetReplicas": {
          "description": "TargetReplicas is the target replicas to be scaled for resources referencing by ScaleTargetRef of this CronFederatedHPA. Only needed when referencing resource is not FederatedHPA.",
          "type": "integer",
          "format": "int32"
        },
        "timeZone": {
          "description": "TimeZone for the giving schedule. If not specified, this will default to the time zone of the karmada-controller-manager process. Invalid TimeZone will be rejected when applying by karmada-webhook. see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for the all timezones.",
          "type": "string"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPASpec": {
      "description": "CronFederatedHPASpec is the specification of the CronFederatedHPA.",
      "type": "object",
      "required": [
        "scaleTargetRef",
        "rules"
      ],
      "properties": {
        "rules": {
          "description": "Rules contains a collection of schedules that declares when and how the referencing target resource should be scaled.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPARule"
          }
        },
        "scaleTargetRef": {
          "description": "ScaleTargetRef points to the target resource to scale. Target resource could be any resource that implementing the scale subresource like Deployment, or FederatedHPA.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.CronFederatedHPAStatus": {
      "description": "CronFederatedHPAStatus represents the current status of a CronFederatedHPA.",
      "type": "object",
      "properties": {
        "executionHistories": {
          "description": "ExecutionHistories record the execution histories of CronFederatedHPARule.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.ExecutionHistory"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.ExecutionHistory": {
      "description": "ExecutionHistory records the execution history of specific CronFederatedHPARule.",
      "type": "object",
      "required": [
        "ruleName"
      ],
      "properties": {
        "failedExecutions": {
          "description": "FailedExecutions records failed executions.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FailedExecution"
          }
        },
        "nextExecutionTime": {
          "description": "NextExecutionTime is the next time to execute. Nil means the rule has been suspended.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "ruleName": {
          "description": "RuleName is the name of the CronFederatedHPARule.",
          "type": "string",
          "default": ""
        },
        "successfulExecutions": {
          "description": "SuccessfulExecutions records successful executions.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.SuccessfulExecution"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FailedExecution": {
      "description": "FailedExecution records a failed execution.",
      "type": "object",
      "required": [
        "scheduleTime",
        "executionTime",
        "message"
      ],
      "properties": {
        "executionTime": {
          "description": "ExecutionTime is the actual execution time of CronFederatedHPARule. Tasks may not always be executed at ScheduleTime. ExecutionTime is used to evaluate the efficiency of the controller's execution.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is the human-readable message indicating details about the failure.",
          "type": "string",
          "default": ""
        },
        "scheduleTime": {
          "description": "ScheduleTime is the expected execution time declared in CronFederatedHPARule.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA": {
      "description": "FederatedHPA is centralized HPA that can aggregate the metrics in multiple clusters. When the system load increases, it will query the metrics from multiple clusters and scales up the replicas. When the system load decreases, it will query the metrics from multiple clusters and scales down the replicas. After the replicas are scaled up/down, karmada-scheduler will schedule the replicas based on the policy.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the specification of the FederatedHPA.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPASpec"
        },
        "status": {
          "description": "Status is the current status of the FederatedHPA.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling.karmada.io",
          "kind": "FederatedHPA",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPAList": {
      "description": "FederatedHPAList contains a list of FederatedHPA.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPA"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling.karmada.io",
          "kind": "FederatedHPAList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.FederatedHPASpec": {
      "description": "FederatedHPASpec describes the desired functionality of the FederatedHPA.",
      "type": "object",
      "required": [
        "scaleTargetRef",
        "maxReplicas"
      ],
      "properties": {
        "behavior": {
          "description": "Behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerBehavior"
        },
        "maxReplicas": {
          "description": "MaxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "metrics": {
          "description": "Metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used). The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods. Ergo, metrics used must decrease as the pod count is increased, and vice-versa. See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricSpec"
          }
        },
        "minReplicas": {
          "description": "MinReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod.",
          "type": "integer",
          "format": "int32"
        },
        "scaleTargetRef": {
          "description": "ScaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.autoscaling.v1alpha1.SuccessfulExecution": {
      "description": "SuccessfulExecution records a successful execution.",
      "type": "object",
      "required": [
        "scheduleTime",
        "executionTime"
      ],
      "properties": {
        "appliedMaxReplicas": {
          "description": "AppliedMaxReplicas is the MaxReplicas have been applied. It is required if .spec.rules[*].targetMaxReplicas is not empty.",
          "type": "integer",
          "format": "int32"
        },
        "appliedMinReplicas": {
          "description": "AppliedMinReplicas is the MinReplicas have been applied. It is required if .spec.rules[*].targetMinReplicas is not empty.",
          "type": "integer",
          "format": "int32"
        },
        "appliedReplicas": {
          "description": "AppliedReplicas is the replicas have been applied. It is required if .spec.rules[*].targetReplicas is not empty.",
          "type": "integer",
          "format": "int32"
        },
        "executionTime": {
          "description": "ExecutionTime is the actual execution time of CronFederatedHPARule. Tasks may not always be executed at ScheduleTime. ExecutionTime is used to evaluate the efficiency of the controller's execution.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "scheduleTime": {
          "description": "ScheduleTime is the expected execution time declared in CronFederatedHPARule.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.APIEnablement": {
      "description": "APIEnablement is a list of API resource, it is used to expose the name of the resources supported in a specific group and version.",
      "type": "object",
      "required": [
        "groupVersion"
      ],
      "properties": {
        "groupVersion": {
          "description": "GroupVersion is the group and version this APIEnablement is for.",
          "type": "string",
          "default": ""
        },
        "resources": {
          "description": "Resources is a list of APIResource.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.APIResource"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.APIResource": {
      "description": "APIResource specifies the name and kind names for the resource.",
      "type": "object",
      "required": [
        "name",
        "kind"
      ],
      "properties": {
        "kind": {
          "description": "Kind is the kind for the resource (e.g. 'Deployment' is the kind for resource 'deployments')",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name is the plural name of the resource.",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.AllocatableModeling": {
      "description": "AllocatableModeling represents the number of nodes in which allocatable resources in a specific resource model grade. E.g. AllocatableModeling{Grade: 2, Count: 10} means 10 nodes belong to resource model in grade 2.",
      "type": "object",
      "required": [
        "grade",
        "count"
      ],
      "properties": {
        "count": {
          "description": "Count is the number of nodes that own the resources delineated by this modeling.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "grade": {
          "description": "Grade is the index of ResourceModel.",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster": {
      "description": "Cluster represents the desire state and status of a member cluster.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents the specification of the desired behavior of member cluster.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.ClusterSpec"
        },
        "status": {
          "description": "Status represents the status of member cluster.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.ClusterStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.karmada.io",
          "kind": "Cluster",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.ClusterList": {
      "description": "ClusterList contains a list of member cluster",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items holds a list of Cluster.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.Cluster"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "cluster.karmada.io",
          "kind": "ClusterList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.ClusterSpec": {
      "description": "ClusterSpec defines the desired state of a member cluster.",
      "type": "object",
      "required": [
        "syncMode"
      ],
      "properties": {
        "apiEndpoint": {
          "description": "The API endpoint of the member cluster. This can be a hostname, hostname:port, IP or IP:port.",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the cluster. It is different from the object uid(.metadata.uid) and typically collected automatically from member cluster during the progress of registration.\n\nThe value is collected in order: 1. If the registering cluster enabled ClusterProperty API and defined the cluster ID by\n  creating a ClusterProperty object with name 'cluster.clusterset.k8s.io', Karmada would\n  take the defined value in the ClusterProperty object.\n  See https://github.com/kubernetes-sigs/about-api for more details about ClusterProperty API.\n2. Take the uid of 'kube-system' namespace on the registering cluster.\n\nPlease don't update this value unless you know what you are doing, because it will/may be used to : - uniquely identify the clusters within the Karmada system. - compose the DNS name of multi-cluster services.",
          "type": "string"
        },
        "impersonatorSecretRef": {
          "description": "ImpersonatorSecretRef represents the secret contains the token of impersonator. The secret should hold credentials as follows: - secret.data.token",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.LocalSecretReference"
        },
        "insecureSkipTLSVerification": {
          "description": "InsecureSkipTLSVerification indicates that the karmada control plane should not confirm the validity of the serving certificate of the cluster it is connecting to. This will make the HTTPS connection between the karmada control plane and the member cluster insecure. Defaults to false.",
          "type": "boolean"
        },
        "provider": {
          "description": "Provider represents the cloud provider name of the member cluster.",
          "type": "string"
        },
        "proxyHeader": {
          "description": "ProxyHeader is the HTTP header required by proxy server. The key in the key-value pair is HTTP header key and value is the associated header payloads. For the header with multiple values, the values should be separated by comma(e.g. 'k1': 'v1,v2,v3').",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "proxyURL": {
          "description": "ProxyURL is the proxy URL for the cluster. If not empty, the karmada control plane will use this proxy to talk to the cluster. More details please refer to: https://github.com/kubernetes/client-go/issues/351",
          "type": "string"
        },
        "region": {
          "description": "Region represents the region of the member cluster locate in.",
          "type": "string"
        },
        "resourceModels": {
          "description": "ResourceModels is the list of resource modeling in this cluster. Each modeling quota can be customized by the user. Modeling name must be one of the following: cpu, memory, storage, ephemeral-storage. If the user does not define the modeling name and modeling quota, it will be the default model. The default model grade from 0 to 8. When grade = 0 or grade = 1, the default model's cpu quota and memory quota is a fix value. When grade greater than or equal to 2, each default model's cpu quota is [2^(grade-1), 2^grade), 2 \u003c= grade \u003c= 7 Each default model's memory quota is [2^(grade + 2), 2^(grade + 3)), 2 \u003c= grade \u003c= 7 E.g. grade 0 likes this: - grade: 0\n  ranges:\n  - name: \"cpu\"\n    min: 0 C\n    max: 1 C\n  - name: \"memory\"\n    min: 0 GB\n    max: 4 GB\n\n- grade: 1\n  ranges:\n  - name: \"cpu\"\n    min: 1 C\n    max: 2 C\n  - name: \"memory\"\n    min: 4 GB\n    max: 16 GB\n\n- grade: 2\n  ranges:\n  - name: \"cpu\"\n    min: 2 C\n    max: 4 C\n  - name: \"memory\"\n    min: 16 GB\n    max: 32 GB\n\n- grade: 7\n  range:\n  - name: \"cpu\"\n    min: 64 C\n    max: 128 C\n  - name: \"memory\"\n    min: 512 GB\n    max: 1024 GB\n\ngrade 8, the last one likes below. No matter what Max value you pass, the meaning of Max value in this grade is infinite. You can pass any number greater than Min value. - grade: 8\n  range:\n  - name: \"cpu\"\n    min: 128 C\n    max: MAXINT\n  - name: \"memory\"\n    min: 1024 GB\n    max: MAXINT",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.ResourceModel"
          }
        },
        "secretRef": {
          "description": "SecretRef represents the secret contains mandatory credentials to access the member cluster. The secret should hold credentials as follows: - secret.data.token - secret.data.caBundle",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.LocalSecretReference"
        },
        "syncMode": {
          "description": "SyncMode describes how a cluster sync resources from karmada control plane.",
          "type": "string",
          "default": ""
        },
        "taints": {
          "description": "Taints attached to the member cluster. Taints on the cluster have the \"effect\" on any resource that does not tolerate the Taint.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Taint"
          }
        },
        "zone": {
          "description": "Zone represents the zone of the member cluster locate in. Deprecated: This filed was never been used by Karmada, and it will not be removed from v1alpha1 for backward compatibility, use Zones instead.",
          "type": "string"
        },
        "zones": {
          "description": "Zones represents the failure zones(also called availability zones) of the member cluster. The zones are presented as a slice to support the case that cluster runs across multiple failure zones. Refer https://kubernetes.io/docs/setup/best-practices/multiple-zones/ for more details about running Kubernetes in multiple zones.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.ClusterStatus": {
      "description": "ClusterStatus contains information about the current status of a cluster updated periodically by cluster controller.",
      "type": "object",
      "properties": {
        "apiEnablements": {
          "description": "APIEnablements represents the list of APIs installed in the member cluster.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.APIEnablement"
          }
        },
        "conditions": {
          "description": "Conditions is an array of current cluster conditions.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        },
        "kubernetesVersion": {
          "description": "KubernetesVersion represents version of the member cluster.",
          "type": "string"
        },
        "nodeSummary": {
          "description": "NodeSummary represents the summary of nodes status in the member cluster.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.NodeSummary"
        },
        "resourceSummary": {
          "description": "ResourceSummary represents the summary of resources in the member cluster.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.ResourceSummary"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.LocalSecretReference": {
      "description": "LocalSecretReference is a reference to a secret within the enclosing namespace.",
      "type": "object",
      "required": [
        "namespace",
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name is the name of resource being referenced.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace is the namespace for the resource being referenced.",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.NodeSummary": {
      "description": "NodeSummary represents the summary of nodes status in a specific cluster.",
      "type": "object",
      "properties": {
        "readyNum": {
          "description": "ReadyNum is the number of ready nodes in the cluster.",
          "type": "integer",
          "format": "int32"
        },
        "totalNum": {
          "description": "TotalNum is the total number of nodes in the cluster.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.ResourceModel": {
      "description": "ResourceModel describes the modeling that you want to statistics.",
      "type": "object",
      "required": [
        "grade",
        "ranges"
      ],
      "properties": {
        "grade": {
          "description": "Grade is the index for the resource modeling.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "ranges": {
          "description": "Ranges describes the resource quota ranges.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.ResourceModelRange"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.ResourceModelRange": {
      "description": "ResourceModelRange describes the detail of each modeling quota that ranges from min to max. Please pay attention, by default, the value of min can be inclusive, and the value of max cannot be inclusive. E.g. in an interval, min = 2, max =10 is set, which means the interval [2,10). This rule ensure that all intervals have the same meaning. If the last interval is infinite, it is definitely unreachable. Therefore, we define the right interval as the open interval. For a valid interval, the value on the right is greater than the value on the left, in other words, max must be greater than min. It is strongly recommended that the [Min, Max) of all ResourceModelRanges can make a continuous interval.",
      "type": "object",
      "required": [
        "name",
        "min",
        "max"
      ],
      "properties": {
        "max": {
          "description": "Max is the maximum amount of this resource represented by resource name. Special Instructions, for the last ResourceModelRange, which no matter what Max value you pass, the meaning is infinite. Because for the last item, any ResourceModelRange's quota larger than Min will be classified to the last one. Of course, the value of the Max field is always greater than the value of the Min field. It should be true in any case.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "min": {
          "description": "Min is the minimum amount of this resource represented by resource name. Note: The Min value of first grade(usually 0) always acts as zero. E.g. [1,2) equal to [0,2).",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "name": {
          "description": "Name is the name for the resource that you want to categorize.",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.ResourceSummary": {
      "description": "ResourceSummary represents the summary of resources in the member cluster.",
      "type": "object",
      "properties": {
        "allocatable": {
          "description": "Allocatable represents the resources of a cluster that are available for scheduling. Total amount of allocatable resources on all nodes.",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "allocatableModelings": {
          "description": "AllocatableModelings represents the statistical resource modeling.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.AllocatableModeling"
          }
        },
        "allocated": {
          "description": "Allocated represents the resources of a cluster that have been scheduled. Total amount of required resources of all Pods that have been scheduled to nodes.",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "allocating": {
          "description": "Allocating represents the resources of a cluster that are pending for scheduling. Total amount of required resources of all Pods that are waiting for scheduling.",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.CustomizationRules": {
      "description": "CustomizationRules describes the interpretation rules.",
      "type": "object",
      "properties": {
        "dependencyInterpretation": {
          "description": "DependencyInterpretation describes the rules for Karmada to analyze the dependent resources. Karmada provides built-in rules for several standard Kubernetes types, see: https://karmada.io/docs/userguide/globalview/customizing-resource-interpreter/#interpretdependency If DependencyInterpretation is set, the built-in rules will be ignored.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.DependencyInterpretation"
        },
        "healthInterpretation": {
          "description": "HealthInterpretation describes the health assessment rules by which Karmada can assess the health state of the resource type.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.HealthInterpretation"
        },
        "replicaResource": {
          "description": "ReplicaResource describes the rules for Karmada to discover the resource's replica as well as resource requirements. It would be useful for those CRD resources that declare workload types like Deployment. It is usually not needed for Kubernetes native resources(Deployment, Job) as Karmada knows how to discover info from them. But if it is set, the built-in discovery rules will be ignored.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ReplicaResourceRequirement"
        },
        "replicaRevision": {
          "description": "ReplicaRevision describes the rules for Karmada to revise the resource's replica. It would be useful for those CRD resources that declare workload types like Deployment. It is usually not needed for Kubernetes native resources(Deployment, Job) as Karmada knows how to revise replicas for them. But if it is set, the built-in revision rules will be ignored.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ReplicaRevision"
        },
        "retention": {
          "description": "Retention describes the desired behavior that Karmada should react on the changes made by member cluster components. This avoids system running into a meaningless loop that Karmada resource controller and the member cluster component continually applying opposite values of a field. For example, the \"replicas\" of Deployment might be changed by the HPA controller on member cluster. In this case, Karmada should retain the \"replicas\" and not try to change it.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.LocalValueRetention"
        },
        "statusAggregation": {
          "description": "StatusAggregation describes the rules for Karmada to aggregate status collected from member clusters to resource template. Karmada provides built-in rules for several standard Kubernetes types, see: https://karmada.io/docs/userguide/globalview/customizing-resource-interpreter/#aggregatestatus If StatusAggregation is set, the built-in rules will be ignored.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.StatusAggregation"
        },
        "statusReflection": {
          "description": "StatusReflection describes the rules for Karmada to pick the resource's status. Karmada provides built-in rules for several standard Kubernetes types, see: https://karmada.io/docs/userguide/globalview/customizing-resource-interpreter/#interpretstatus If StatusReflection is set, the built-in rules will be ignored.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.StatusReflection"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.CustomizationTarget": {
      "description": "CustomizationTarget represents the resource type that the customization applies to.",
      "type": "object",
      "required": [
        "apiVersion",
        "kind"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion represents the API version of the target resource.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind represents the Kind of target resources.",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.DependencyInterpretation": {
      "description": "DependencyInterpretation holds the rules for interpreting the dependent resources of a specific resources.",
      "type": "object",
      "required": [
        "luaScript"
      ],
      "properties": {
        "luaScript": {
          "description": "LuaScript holds the Lua script that is used to interpret the dependencies of a specific resource. The script should implement a function as follows:\n\n```\n  luaScript: \u003e\n      function GetDependencies(desiredObj)\n          dependencies = {}\n          if desiredObj.spec.serviceAccountName ~= nil and desiredObj.spec.serviceAccountName ~= \"default\" then\n              dependency = {}\n              dependency.apiVersion = \"v1\"\n              dependency.kind = \"ServiceAccount\"\n              dependency.name = desiredObj.spec.serviceAccountName\n              dependency.namespace = desiredObj.namespace\n              dependencies[1] = {}\n              dependencies[1] = dependency\n          end\n          return dependencies\n      end\n```\n\nThe content of the LuaScript needs to be a whole function including both declaration and implementation.\n\nThe parameters will be supplied by the system:\n  - desiredObj: the object represents the configuration to be applied\n      to the member cluster.\n\nThe returned value should be expressed by a slice of DependentObjectReference.",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.HealthInterpretation": {
      "description": "HealthInterpretation holds the rules for interpreting the health state of a specific resource.",
      "type": "object",
      "required": [
        "luaScript"
      ],
      "properties": {
        "luaScript": {
          "description": "LuaScript holds the Lua script that is used to assess the health state of a specific resource. The script should implement a function as follows:\n\n```\n  luaScript: \u003e\n      function InterpretHealth(observedObj)\n          if observedObj.status.readyReplicas == observedObj.spec.replicas then\n              return true\n          end\n      end\n```\n\nThe content of the LuaScript needs to be a whole function including both declaration and implementation.\n\nThe parameters will be supplied by the system:\n  - observedObj: the object represents the configuration that is observed\n      from a specific member cluster.\n\nThe returned boolean value indicates the health status.",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.LocalValueRetention": {
      "description": "LocalValueRetention holds the scripts for retention. Now only supports Lua.",
      "type": "object",
      "required": [
        "luaScript"
      ],
      "properties": {
        "luaScript": {
          "description": "LuaScript holds the Lua script that is used to retain runtime values to the desired specification.\n\nThe script should implement a function as follows:\n\n```\n  luaScript: \u003e\n      function Retain(desiredObj, observedObj)\n          desiredObj.spec.fieldFoo = observedObj.spec.fieldFoo\n          return desiredObj\n      end\n```\n\nThe content of the LuaScript needs to be a whole function including both declaration and implementation.\n\nThe parameters will be supplied by the system:\n  - desiredObj: the object represents the configuration to be applied\n      to the member cluster.\n  - observedObj: the object represents the configuration that is observed\n      from a specific member cluster.\n\nThe returned object should be a retained configuration which will be applied to member cluster eventually.",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ReplicaResourceRequirement": {
      "description": "ReplicaResourceRequirement holds the scripts for getting the desired replicas as well as the resource requirement of each replica.",
      "type": "object",
      "required": [
        "luaScript"
      ],
      "properties": {
        "luaScript": {
          "description": "LuaScript holds the Lua script that is used to discover the resource's replica as well as resource requirements\n\nThe script should implement a function as follows:\n\n```\n  luaScript: \u003e\n      function GetReplicas(desiredObj)\n          replica = desiredObj.spec.replicas\n          requirement = {}\n          requirement.nodeClaim = {}\n          requirement.nodeClaim.nodeSelector = desiredObj.spec.template.spec.nodeSelector\n          requirement.nodeClaim.tolerations = desiredObj.spec.template.spec.tolerations\n          requirement.resourceRequest = desiredObj.spec.template.spec.containers[1].resources.limits\n          return replica, requirement\n      end\n```\n\nThe content of the LuaScript needs to be a whole function including both declaration and implementation.\n\nThe parameters will be supplied by the system:\n  - desiredObj: the object represents the configuration to be applied\n      to the member cluster.\n\nThe function expects two return values:\n  - replica: the declared replica number\n  - requirement: the resource required by each replica expressed with a\n      ResourceBindingSpec.ReplicaRequirements.\nThe returned values will be set into a ResourceBinding or ClusterResourceBinding.",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ReplicaRevision": {
      "description": "ReplicaRevision holds the scripts for revising the desired replicas.",
      "type": "object",
      "required": [
        "luaScript"
      ],
      "properties": {
        "luaScript": {
          "description": "LuaScript holds the Lua script that is used to revise replicas in the desired specification. The script should implement a function as follows:\n\n```\n  luaScript: \u003e\n      function ReviseReplica(desiredObj, desiredReplica)\n          desiredObj.spec.replicas = desiredReplica\n          return desiredObj\n      end\n```\n\nThe content of the LuaScript needs to be a whole function including both declaration and implementation.\n\nThe parameters will be supplied by the system:\n  - desiredObj: the object represents the configuration to be applied\n      to the member cluster.\n  - desiredReplica: the replica number should be applied with.\n\nThe returned object should be a revised configuration which will be applied to member cluster eventually.",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization": {
      "description": "ResourceInterpreterCustomization describes the configuration of a specific resource for Karmada to get the structure. It has higher precedence than the default interpreter and the interpreter webhook.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec describes the configuration in detail.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomizationSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.karmada.io",
          "kind": "ResourceInterpreterCustomization",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomizationList": {
      "description": "ResourceInterpreterCustomizationList contains a list of ResourceInterpreterCustomization.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomization"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.karmada.io",
          "kind": "ResourceInterpreterCustomizationList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterCustomizationSpec": {
      "description": "ResourceInterpreterCustomizationSpec describes the configuration in detail.",
      "type": "object",
      "required": [
        "target",
        "customizations"
      ],
      "properties": {
        "customizations": {
          "description": "Customizations describe the interpretation rules.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.CustomizationRules"
        },
        "target": {
          "description": "CustomizationTarget represents the resource type that the customization applies to.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.CustomizationTarget"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhook": {
      "description": "ResourceInterpreterWebhook describes the webhook as well as the resources and operations it applies to.",
      "type": "object",
      "required": [
        "name",
        "clientConfig",
        "interpreterContextVersions"
      ],
      "properties": {
        "clientConfig": {
          "description": "ClientConfig defines how to communicate with the hook.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig"
        },
        "interpreterContextVersions": {
          "description": "InterpreterContextVersions is an ordered list of preferred `ResourceInterpreterContext` versions the Webhook expects. Karmada will try to use first version in the list which it supports. If none of the versions specified in this list supported by Karmada, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the Karmada, calls to the webhook will fail and be subject to the failure policy.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "name": {
          "description": "Name is the full-qualified name of the webhook.",
          "type": "string",
          "default": ""
        },
        "rules": {
          "description": "Rules describes what operations on what resources the webhook cares about. The webhook cares about an operation if it matches any Rule.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.RuleWithOperations"
          }
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration": {
      "description": "ResourceInterpreterWebhookConfiguration describes the configuration of webhooks which take the responsibility to tell karmada the details of the resource object, especially for custom resources.",
      "type": "object",
      "required": [
        "webhooks"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhook"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.karmada.io",
          "kind": "ResourceInterpreterWebhookConfiguration",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfigurationList": {
      "description": "ResourceInterpreterWebhookConfigurationList contains a list of ResourceInterpreterWebhookConfiguration.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items holds a list of ResourceInterpreterWebhookConfiguration.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.ResourceInterpreterWebhookConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "config.karmada.io",
          "kind": "ResourceInterpreterWebhookConfigurationList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.RuleWithOperations": {
      "description": "RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.",
      "type": "object",
      "required": [
        "operations",
        "apiGroups",
        "apiVersions",
        "kinds"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. For example:\n [\"apps\", \"batch\", \"example.io\"] means matches 3 groups.\n [\"*\"] means matches all group\n\nNote: The group could be empty, e.g the 'core' group of kubernetes, in that case use [\"\"].",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "apiVersions": {
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. For example:\n [\"v1alpha1\", \"v1beta1\"] means matches 2 versions.\n [\"*\"] means matches all versions.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "kinds": {
          "description": "Kinds is a list of resources this rule applies to. If '*' is present, the length of the slice must be one. For example:\n [\"Deployment\", \"Pod\"] means matches Deployment and Pod.\n [\"*\"] means apply to all resources.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "operations": {
          "description": "Operations is the operations the hook cares about. If '*' is present, the length of the slice must be one.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.StatusAggregation": {
      "description": "StatusAggregation holds the scripts for aggregating several decentralized statuses.",
      "type": "object",
      "required": [
        "luaScript"
      ],
      "properties": {
        "luaScript": {
          "description": "LuaScript holds the Lua script that is used to aggregate decentralized statuses to the desired specification. The script should implement a function as follows:\n\n```\n  luaScript: \u003e\n      function AggregateStatus(desiredObj, statusItems)\n          for i = 1, #statusItems do\n              desiredObj.status.readyReplicas = desiredObj.status.readyReplicas + items[i].readyReplicas\n          end\n          return desiredObj\n      end\n```\n\nThe content of the LuaScript needs to be a whole function including both declaration and implementation.\n\nThe parameters will be supplied by the system:\n  - desiredObj: the object represents a resource template.\n  - statusItems: the slice of status expressed with AggregatedStatusItem.\n\nThe returned object should be a whole object with status aggregated.",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.config.v1alpha1.StatusReflection": {
      "description": "StatusReflection holds the scripts for getting the status.",
      "type": "object",
      "required": [
        "luaScript"
      ],
      "properties": {
        "luaScript": {
          "description": "LuaScript holds the Lua script that is used to get the status from the observed specification. The script should implement a function as follows:\n\n```\n  luaScript: \u003e\n      function ReflectStatus(observedObj)\n          status = {}\n          status.readyReplicas = observedObj.status.observedObj\n          return status\n      end\n```\n\nThe content of the LuaScript needs to be a whole function including both declaration and implementation.\n\nThe parameters will be supplied by the system:\n  - observedObj: the object represents the configuration that is observed\n      from a specific member cluster.\n\nThe returned status could be the whole status or part of it and will be set into both Work and ResourceBinding(ClusterResourceBinding).",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.ClusterSelector": {
      "description": "ClusterSelector specifies the cluster to be selected.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the name of the cluster to be selected.",
          "type": "string"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.ExposurePort": {
      "description": "ExposurePort describes which port will be exposed.",
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "name": {
          "description": "Name is the name of the port that needs to be exposed within the service. The port name must be the same as that defined in the service.",
          "type": "string"
        },
        "port": {
          "description": "Port specifies the exposed service port.",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.ExposureRange": {
      "description": "ExposureRange describes a list of clusters where the service is exposed. Now supports selecting cluster by name, leave the room for extend more methods such as using label selector.",
      "type": "object",
      "properties": {
        "clusterNames": {
          "description": "ClusterNames is the list of clusters to be selected.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress": {
      "description": "MultiClusterIngress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. The structure of MultiClusterIngress is same as Ingress, indicates the Ingress in multi-clusters.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the MultiClusterIngress.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressSpec"
        },
        "status": {
          "description": "Status is the current state of the MultiClusterIngress.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.karmada.io",
          "kind": "MultiClusterIngress",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngressList": {
      "description": "MultiClusterIngressList is a collection of MultiClusterIngress.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of MultiClusterIngress.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterIngress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.karmada.io",
          "kind": "MultiClusterIngressList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService": {
      "description": "MultiClusterService is a named abstraction of multi-cluster software service. The name field of MultiClusterService is the same as that of Service name. Services with the same name in different clusters are regarded as the same service and are associated with the same MultiClusterService. MultiClusterService can control the exposure of services to outside multiple clusters, and also enable service discovery between clusters.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the MultiClusterService.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterServiceSpec"
        },
        "status": {
          "description": "Status is the current state of the MultiClusterService.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.karmada.io",
          "kind": "MultiClusterService",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterServiceList": {
      "description": "MultiClusterServiceList is a collection of MultiClusterService.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of MultiClusterService.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterService"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.karmada.io",
          "kind": "MultiClusterServiceList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.MultiClusterServiceSpec": {
      "description": "MultiClusterServiceSpec is the desired state of the MultiClusterService.",
      "type": "object",
      "required": [
        "types"
      ],
      "properties": {
        "consumerClusters": {
          "description": "ConsumerClusters specifies the clusters where the service will be exposed, for clients. If leave it empty, the service will be exposed to all clusters.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.ClusterSelector"
          }
        },
        "ports": {
          "description": "Ports is the list of ports that are exposed by this MultiClusterService. No specified port will be filtered out during the service exposure and discovery process. All ports in the referencing service will be exposed by default.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.ExposurePort"
          }
        },
        "providerClusters": {
          "description": "ProviderClusters specifies the clusters which will provide the service backend. If leave it empty, we will collect the backend endpoints from all clusters and sync them to the ConsumerClusters.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.ClusterSelector"
          }
        },
        "range": {
          "description": "Range specifies the ranges where the referencing service should be exposed. Only valid and optional in case of Types contains CrossCluster. If not set and Types contains CrossCluster, all clusters will be selected, that means the referencing service will be exposed across all registered clusters. Deprecated: in favor of ProviderClusters/ConsumerClusters.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.networking.v1alpha1.ExposureRange"
        },
        "serviceConsumptionClusters": {
          "description": "ServiceConsumptionClusters specifies the clusters where the service will be exposed, for clients. If leave it empty, the service will be exposed to all clusters. Deprecated: in favor of ProviderClusters/ConsumerClusters.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "serviceProvisionClusters": {
          "description": "ServiceProvisionClusters specifies the clusters which will provision the service backend. If leave it empty, we will collect the backend endpoints from all clusters and sync them to the ServiceConsumptionClusters. Deprecated: in favor of ProviderClusters/ConsumerClusters.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "types": {
          "description": "Types specifies how to expose the service referencing by this MultiClusterService.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ApplicationFailoverBehavior": {
      "description": "ApplicationFailoverBehavior indicates application failover behaviors.",
      "type": "object",
      "required": [
        "decisionConditions"
      ],
      "properties": {
        "decisionConditions": {
          "description": "DecisionConditions indicates the decision conditions of performing the failover process. Only when all conditions are met can the failover process be performed. Currently, DecisionConditions includes several conditions: - TolerationSeconds (optional)",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.DecisionConditions"
        },
        "gracePeriodSeconds": {
          "description": "GracePeriodSeconds is the maximum waiting duration in seconds before application on the migrated cluster should be deleted. Required only when PurgeMode is \"Graciously\" and defaults to 600s. If the application on the new cluster cannot reach a Healthy state, Karmada will delete the application after GracePeriodSeconds is reached. Value must be positive integer.",
          "type": "integer",
          "format": "int32"
        },
        "purgeMode": {
          "description": "PurgeMode represents how to deal with the legacy applications on the cluster from which the application is migrated. Valid options are \"Immediately\", \"Graciously\" and \"Never\". Defaults to \"Graciously\".",
          "type": "string"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterAffinity": {
      "description": "ClusterAffinity represents the filter to select clusters.",
      "type": "object",
      "properties": {
        "clusterNames": {
          "description": "ClusterNames is the list of clusters to be selected.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "exclude": {
          "description": "ExcludedClusters is the list of clusters to be ignored.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "fieldSelector": {
          "description": "FieldSelector is a filter to select member clusters by fields. The key(field) of the match expression should be 'provider', 'region', or 'zone', and the operator of the match expression should be 'In' or 'NotIn'. If non-nil and non-empty, only the clusters match this filter will be selected.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FieldSelector"
        },
        "labelSelector": {
          "description": "LabelSelector is a filter to select member clusters by labels. If non-nil and non-empty, only the clusters match this filter will be selected.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterAffinityTerm": {
      "description": "ClusterAffinityTerm selects a set of cluster.",
      "type": "object",
      "required": [
        "affinityName"
      ],
      "properties": {
        "affinityName": {
          "description": "AffinityName is the name of the cluster group.",
          "type": "string",
          "default": ""
        },
        "clusterNames": {
          "description": "ClusterNames is the list of clusters to be selected.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "exclude": {
          "description": "ExcludedClusters is the list of clusters to be ignored.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "fieldSelector": {
          "description": "FieldSelector is a filter to select member clusters by fields. The key(field) of the match expression should be 'provider', 'region', or 'zone', and the operator of the match expression should be 'In' or 'NotIn'. If non-nil and non-empty, only the clusters match this filter will be selected.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FieldSelector"
        },
        "labelSelector": {
          "description": "LabelSelector is a filter to select member clusters by labels. If non-nil and non-empty, only the clusters match this filter will be selected.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy": {
      "description": "ClusterOverridePolicy represents the cluster-wide policy that overrides a group of resources to one or more clusters.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents the desired behavior of ClusterOverridePolicy.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverrideSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.karmada.io",
          "kind": "ClusterOverridePolicy",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicyList": {
      "description": "ClusterOverridePolicyList is a collection of ClusterOverridePolicy.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items holds a list of ClusterOverridePolicy.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterOverridePolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.karmada.io",
          "kind": "ClusterOverridePolicyList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPreferences": {
      "description": "ClusterPreferences describes weight for each cluster or for each group of cluster.",
      "type": "object",
      "properties": {
        "dynamicWeight": {
          "description": "DynamicWeight specifies the factor to generates dynamic weight list. If specified, StaticWeightList will be ignored.",
          "type": "string"
        },
        "staticWeightList": {
          "description": "StaticWeightList defines the static cluster weight.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.StaticClusterWeight"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy": {
      "description": "ClusterPropagationPolicy represents the cluster-wide policy that propagates a group of resources to one or more clusters. Different with PropagationPolicy that could only propagate resources in its own namespace, ClusterPropagationPolicy is able to propagate cluster level resources and resources in any namespace other than system reserved ones. System reserved namespaces are: karmada-system, karmada-cluster, karmada-es-*.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents the desired behavior of ClusterPropagationPolicy.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.karmada.io",
          "kind": "ClusterPropagationPolicy",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicyList": {
      "description": "ClusterPropagationPolicyList contains a list of ClusterPropagationPolicy.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPropagationPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.karmada.io",
          "kind": "ClusterPropagationPolicyList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterQuotaStatus": {
      "description": "ClusterQuotaStatus represents the set of desired limits and observed usage for a specific cluster.",
      "type": "object",
      "required": [
        "clusterName"
      ],
      "properties": {
        "clusterName": {
          "description": "ClusterName is the name of the cluster the limits enforce to.",
          "type": "string",
          "default": ""
        },
        "hard": {
          "description": "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "used": {
          "description": "Used is the current observed total usage of the resource in the namespace.",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.CommandArgsOverrider": {
      "description": "CommandArgsOverrider represents the rules dedicated to handling command/args overrides.",
      "type": "object",
      "required": [
        "containerName",
        "operator"
      ],
      "properties": {
        "containerName": {
          "description": "The name of container",
          "type": "string",
          "default": ""
        },
        "operator": {
          "description": "Operator represents the operator which will apply on the command/args.",
          "type": "string",
          "default": ""
        },
        "value": {
          "description": "Value to be applied to command/args. Items in Value which will be appended after command/args when Operator is 'add'. Items in Value which match in command/args will be deleted when Operator is 'remove'. If Value is empty, then the command/args will remain the same.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.DecisionConditions": {
      "description": "DecisionConditions represents the decision conditions of performing the failover process.",
      "type": "object",
      "properties": {
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time Karmada should wait after reaching the desired state before performing failover process. If not specified, Karmada will immediately perform failover process. Defaults to 300s.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FailoverBehavior": {
      "description": "FailoverBehavior indicates failover behaviors in case of an application or cluster failure.",
      "type": "object",
      "properties": {
        "application": {
          "description": "Application indicates failover behaviors in case of application failure. If this value is nil, failover is disabled. If set, the PropagateDeps should be true so that the dependencies could be migrated along with the application.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ApplicationFailoverBehavior"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota": {
      "description": "FederatedResourceQuota sets aggregate quota restrictions enforced per namespace across all clusters.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired quota.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuotaSpec"
        },
        "status": {
          "description": "Status defines the actual enforced quota and its current usage.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuotaStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.karmada.io",
          "kind": "FederatedResourceQuota",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuotaList": {
      "description": "FederatedResourceQuotaList contains a list of FederatedResourceQuota.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuota"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.karmada.io",
          "kind": "FederatedResourceQuotaList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuotaSpec": {
      "description": "FederatedResourceQuotaSpec defines the desired hard limits to enforce for Quota.",
      "type": "object",
      "required": [
        "overall"
      ],
      "properties": {
        "overall": {
          "description": "Overall is the set of desired hard limits for each named resource.",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "staticAssignments": {
          "description": "StaticAssignments represents the subset of desired hard limits for each cluster. Note: for clusters not present in this list, Karmada will set an empty ResourceQuota to them, which means these clusters will have no quotas in the referencing namespace.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.StaticClusterAssignment"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FederatedResourceQuotaStatus": {
      "description": "FederatedResourceQuotaStatus defines the enforced hard limits and observed use.",
      "type": "object",
      "properties": {
        "aggregatedStatus": {
          "description": "AggregatedStatus is the observed quota usage of each cluster.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterQuotaStatus"
          }
        },
        "overall": {
          "description": "Overall is the set of enforced hard limits for each named resource.",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "overallUsed": {
          "description": "OverallUsed is the current observed total usage of the resource in the namespace.",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FieldSelector": {
      "description": "FieldSelector is a field filter.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "A list of field selector requirements.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ImageOverrider": {
      "description": "ImageOverrider represents the rules dedicated to handling image overrides.",
      "type": "object",
      "required": [
        "component",
        "operator"
      ],
      "properties": {
        "component": {
          "description": "Component is part of image name. Basically we presume an image can be made of '[registry/]repository[:tag]'. The registry could be: - registry.k8s.io - fictional.registry.example:10443 The repository could be: - kube-apiserver - fictional/nginx The tag cloud be: - latest - v1.19.1 - @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c",
          "type": "string",
          "default": ""
        },
        "operator": {
          "description": "Operator represents the operator which will apply on the image.",
          "type": "string",
          "default": ""
        },
        "predicate": {
          "description": "Predicate filters images before applying the rule.\n\nDefaults to nil, in that case, the system will automatically detect image fields if the resource type is Pod, ReplicaSet, Deployment, StatefulSet, DaemonSet or Job by following rule:\n  - Pod: /spec/containers/\u003cN\u003e/image\n  - ReplicaSet: /spec/template/spec/containers/\u003cN\u003e/image\n  - Deployment: /spec/template/spec/containers/\u003cN\u003e/image\n  - DaemonSet: /spec/template/spec/containers/\u003cN\u003e/image\n  - StatefulSet: /spec/template/spec/containers/\u003cN\u003e/image\n  - Job: /spec/template/spec/containers/\u003cN\u003e/image\nIn addition, all images will be processed if the resource object has more than one container.\n\nIf not nil, only images matches the filters will be processed.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ImagePredicate"
        },
        "value": {
          "description": "Value to be applied to image. Must not be empty when operator is 'add' or 'replace'. Defaults to empty and ignored when operator is 'remove'.",
          "type": "string"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ImagePredicate": {
      "description": "ImagePredicate describes images filter.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "Path indicates the path of target field",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.LabelAnnotationOverrider": {
      "description": "LabelAnnotationOverrider represents the rules dedicated to handling workload labels/annotations",
      "type": "object",
      "required": [
        "operator"
      ],
      "properties": {
        "operator": {
          "description": "Operator represents the operator which will apply on the workload.",
          "type": "string",
          "default": ""
        },
        "value": {
          "description": "Value to be applied to annotations/labels of workload. Items in Value which will be appended after annotations/labels when Operator is 'add'. Items in Value which match in annotations/labels will be deleted when Operator is 'remove'. Items in Value which match in annotations/labels will be replaced when Operator is 'replace'.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy": {
      "description": "OverridePolicy represents the policy that overrides a group of resources to one or more clusters.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents the desired behavior of OverridePolicy.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverrideSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.karmada.io",
          "kind": "OverridePolicy",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicyList": {
      "description": "OverridePolicyList is a collection of OverridePolicy.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items holds a list of OverridePolicy.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverridePolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.karmada.io",
          "kind": "OverridePolicyList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.OverrideSpec": {
      "description": "OverrideSpec defines the desired behavior of OverridePolicy.",
      "type": "object",
      "properties": {
        "overrideRules": {
          "description": "OverrideRules defines a collection of override rules on target clusters.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.RuleWithCluster"
          }
        },
        "overriders": {
          "description": "Overriders represents the override rules that would apply on resources\n\nDeprecated: This filed is deprecated in v1.0 and please use the OverrideRules instead.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.Overriders"
        },
        "resourceSelectors": {
          "description": "ResourceSelectors restricts resource types that this override policy applies to. nil means matching all resources.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ResourceSelector"
          }
        },
        "targetCluster": {
          "description": "TargetCluster defines restrictions on this override policy that only applies to resources propagated to the matching clusters. nil means matching all clusters.\n\nDeprecated: This filed is deprecated in v1.0 and please use the OverrideRules instead.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterAffinity"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.Overriders": {
      "description": "Overriders offers various alternatives to represent the override rules.\n\nIf more than one alternative exists, they will be applied with following order: - ImageOverrider - CommandOverrider - ArgsOverrider - LabelsOverrider - AnnotationsOverrider - Plaintext",
      "type": "object",
      "properties": {
        "annotationsOverrider": {
          "description": "AnnotationsOverrider represents the rules dedicated to handling workload annotations",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.LabelAnnotationOverrider"
          }
        },
        "argsOverrider": {
          "description": "ArgsOverrider represents the rules dedicated to handling container args",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.CommandArgsOverrider"
          }
        },
        "commandOverrider": {
          "description": "CommandOverrider represents the rules dedicated to handling container command",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.CommandArgsOverrider"
          }
        },
        "imageOverrider": {
          "description": "ImageOverrider represents the rules dedicated to handling image overrides.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ImageOverrider"
          }
        },
        "labelsOverrider": {
          "description": "LabelsOverrider represents the rules dedicated to handling workload labels",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.LabelAnnotationOverrider"
          }
        },
        "plaintext": {
          "description": "Plaintext represents override rules defined with plaintext overriders.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PlaintextOverrider"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.Placement": {
      "description": "Placement represents the rule for select clusters.",
      "type": "object",
      "properties": {
        "clusterAffinities": {
          "description": "ClusterAffinities represents scheduling restrictions to multiple cluster groups that indicated by ClusterAffinityTerm.\n\nThe scheduler will evaluate these groups one by one in the order they appear in the spec, the group that does not satisfy scheduling restrictions will be ignored which means all clusters in this group will not be selected unless it also belongs to the next group(a cluster could belong to multiple groups).\n\nIf none of the groups satisfy the scheduling restrictions, then scheduling fails, which means no cluster will be selected.\n\nNote:\n  1. ClusterAffinities can not co-exist with ClusterAffinity.\n  2. If both ClusterAffinity and ClusterAffinities are not set, any cluster\n     can be scheduling candidates.\n\nPotential use case 1: The private clusters in the local data center could be the main group, and the managed clusters provided by cluster providers could be the secondary group. So that the Karmada scheduler would prefer to schedule workloads to the main group and the second group will only be considered in case of the main group does not satisfy restrictions(like, lack of resources).\n\nPotential use case 2: For the disaster recovery scenario, the clusters could be organized to primary and backup groups, the workloads would be scheduled to primary clusters firstly, and when primary cluster fails(like data center power off), Karmada scheduler could migrate workloads to the backup clusters.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterAffinityTerm"
          }
        },
        "clusterAffinity": {
          "description": "ClusterAffinity represents scheduling restrictions to a certain set of clusters. Note:\n  1. ClusterAffinity can not co-exist with ClusterAffinities.\n  2. If both ClusterAffinity and ClusterAffinities are not set, any cluster\n     can be scheduling candidates.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterAffinity"
        },
        "clusterTolerations": {
          "description": "ClusterTolerations represents the tolerations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }
        },
        "replicaScheduling": {
          "description": "ReplicaScheduling represents the scheduling policy on dealing with the number of replicas when propagating resources that have replicas in spec (e.g. deployments, statefulsets) to member clusters.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ReplicaSchedulingStrategy"
        },
        "spreadConstraints": {
          "description": "SpreadConstraints represents a list of the scheduling constraints.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.SpreadConstraint"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PlaintextOverrider": {
      "description": "PlaintextOverrider is a simple overrider that overrides target fields according to path, operator and value.",
      "type": "object",
      "required": [
        "path",
        "operator"
      ],
      "properties": {
        "operator": {
          "description": "Operator indicates the operation on target field. Available operators are: add, replace and remove.",
          "type": "string",
          "default": ""
        },
        "path": {
          "description": "Path indicates the path of target field",
          "type": "string",
          "default": ""
        },
        "value": {
          "description": "Value to be applied to target field. Must be empty when operator is Remove.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy": {
      "description": "PropagationPolicy represents the policy that propagates a group of resources to one or more clusters.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents the desired behavior of PropagationPolicy.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.karmada.io",
          "kind": "PropagationPolicy",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicyList": {
      "description": "PropagationPolicyList contains a list of PropagationPolicy.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy.karmada.io",
          "kind": "PropagationPolicyList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.PropagationSpec": {
      "description": "PropagationSpec represents the desired behavior of PropagationPolicy.",
      "type": "object",
      "required": [
        "resourceSelectors"
      ],
      "properties": {
        "association": {
          "description": "Association tells if relevant resources should be selected automatically. e.g. a ConfigMap referred by a Deployment. default false. Deprecated: in favor of PropagateDeps.",
          "type": "boolean"
        },
        "conflictResolution": {
          "description": "ConflictResolution declares how potential conflict should be handled when a resource that is being propagated already exists in the target cluster.\n\nIt defaults to \"Abort\" which means stop propagating to avoid unexpected overwrites. The \"Overwrite\" might be useful when migrating legacy cluster resources to Karmada, in which case conflict is predictable and can be instructed to Karmada take over the resource by overwriting.",
          "type": "string"
        },
        "dependentOverrides": {
          "description": "DependentOverrides represents the list of overrides(OverridePolicy) which must present before the current PropagationPolicy takes effect.\n\nIt used to explicitly specify overrides which current PropagationPolicy rely on. A typical scenario is the users create OverridePolicy(ies) and resources at the same time, they want to ensure the new-created policies would be adopted.\n\nNote: For the overrides, OverridePolicy(ies) in current namespace and ClusterOverridePolicy(ies), which not present in this list will still be applied if they matches the resources.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "failover": {
          "description": "Failover indicates how Karmada migrates applications in case of failures. If this value is nil, failover is disabled.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FailoverBehavior"
        },
        "placement": {
          "description": "Placement represents the rule for select clusters to propagate resources.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.Placement"
        },
        "preemption": {
          "description": "Preemption declares the behaviors for preempting. Valid options are \"Always\" and \"Never\".\n\n\nPossible enum values:\n - `\"Always\"` means that preemption is allowed. If it is applied to a PropagationPolicy, it can preempt any resource as per Priority, regardless of whether it has been claimed by a PropagationPolicy or a ClusterPropagationPolicy, as long as it can match the rules defined in ResourceSelector. In addition, if a resource has already been claimed by a ClusterPropagationPolicy, the PropagationPolicy can still preempt it without considering Priority. If it is applied to a ClusterPropagationPolicy, it can only preempt from ClusterPropagationPolicy, and from PropagationPolicy is not allowed.\n - `\"Never\"` means that a PropagationPolicy(ClusterPropagationPolicy) never preempts resources.",
          "type": "string",
          "enum": [
            "Always",
            "Never"
          ]
        },
        "priority": {
          "description": "Priority indicates the importance of a policy(PropagationPolicy or ClusterPropagationPolicy). A policy will be applied for the matched resource templates if there is no other policies with higher priority at the point of the resource template be processed. Once a resource template has been claimed by a policy, by default it will not be preempted by following policies even with a higher priority. See Preemption for more details.\n\nIn case of two policies have the same priority, the one with a more precise matching rules in ResourceSelectors wins: - matching by name(resourceSelector.name) has higher priority than\n  by selector(resourceSelector.labelSelector)\n- matching by selector(resourceSelector.labelSelector) has higher priority\n  than by APIVersion(resourceSelector.apiVersion) and Kind(resourceSelector.kind).\nIf there is still no winner at this point, the one with the lower alphabetic order wins, e.g. policy 'bar' has higher priority than 'foo'.\n\nThe higher the value, the higher the priority. Defaults to zero.",
          "type": "integer",
          "format": "int32"
        },
        "propagateDeps": {
          "description": "PropagateDeps tells if relevant resources should be propagated automatically. Take 'Deployment' which referencing 'ConfigMap' and 'Secret' as an example, when 'propagateDeps' is 'true', the referencing resources could be omitted(for saving config effort) from 'resourceSelectors' as they will be propagated along with the Deployment. In addition to the propagating process, the referencing resources will be migrated along with the Deployment in the fail-over scenario.\n\nDefaults to false.",
          "type": "boolean"
        },
        "resourceSelectors": {
          "description": "ResourceSelectors used to select resources. Nil or empty selector is not allowed and doesn't mean match all kinds of resources for security concerns that sensitive resources(like Secret) might be accidentally propagated.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ResourceSelector"
          }
        },
        "schedulerName": {
          "description": "SchedulerName represents which scheduler to proceed the scheduling. If specified, the policy will be dispatched by specified scheduler. If not specified, the policy will be dispatched by default scheduler.",
          "type": "string"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ReplicaSchedulingStrategy": {
      "description": "ReplicaSchedulingStrategy represents the assignment strategy of replicas.",
      "type": "object",
      "properties": {
        "replicaDivisionPreference": {
          "description": "ReplicaDivisionPreference determines how the replicas is divided when ReplicaSchedulingType is \"Divided\". Valid options are Aggregated and Weighted. \"Aggregated\" divides replicas into clusters as few as possible, while respecting clusters' resource availabilities during the division. \"Weighted\" divides replicas by weight according to WeightPreference.",
          "type": "string"
        },
        "replicaSchedulingType": {
          "description": "ReplicaSchedulingType determines how the replicas is scheduled when karmada propagating a resource. Valid options are Duplicated and Divided. \"Duplicated\" duplicates the same replicas to each candidate member cluster from resource. \"Divided\" divides replicas into parts according to number of valid candidate member clusters, and exact replicas for each cluster are determined by ReplicaDivisionPreference.",
          "type": "string"
        },
        "weightPreference": {
          "description": "WeightPreference describes weight for each cluster or for each group of cluster If ReplicaDivisionPreference is set to \"Weighted\", and WeightPreference is not set, scheduler will weight all clusters the same.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterPreferences"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ResourceSelector": {
      "description": "ResourceSelector the resources will be selected.",
      "type": "object",
      "required": [
        "apiVersion",
        "kind"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion represents the API version of the target resources.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind represents the Kind of the target resources.",
          "type": "string",
          "default": ""
        },
        "labelSelector": {
          "description": "A label query over a set of resources. If name is not empty, labelSelector will be ignored.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "name": {
          "description": "Name of the target resource. Default is empty, which means selecting all resources.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the target resource. Default is empty, which means inherit from the parent object scope.",
          "type": "string"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.RuleWithCluster": {
      "description": "RuleWithCluster defines the override rules on clusters.",
      "type": "object",
      "required": [
        "overriders"
      ],
      "properties": {
        "overriders": {
          "description": "Overriders represents the override rules that would apply on resources",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.Overriders"
        },
        "targetCluster": {
          "description": "TargetCluster defines restrictions on this override policy that only applies to resources propagated to the matching clusters. nil means matching all clusters.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterAffinity"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.SpreadConstraint": {
      "description": "SpreadConstraint represents the spread constraints on resources.",
      "type": "object",
      "properties": {
        "maxGroups": {
          "description": "MaxGroups restricts the maximum number of cluster groups to be selected.",
          "type": "integer",
          "format": "int32"
        },
        "minGroups": {
          "description": "MinGroups restricts the minimum number of cluster groups to be selected. Defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "spreadByField": {
          "description": "SpreadByField represents the fields on Karmada cluster API used for dynamically grouping member clusters into different groups. Resources will be spread among different cluster groups. Available fields for spreading are: cluster, region, zone, and provider. SpreadByField should not co-exist with SpreadByLabel. If both SpreadByField and SpreadByLabel are empty, SpreadByField will be set to \"cluster\" by system.",
          "type": "string"
        },
        "spreadByLabel": {
          "description": "SpreadByLabel represents the label key used for grouping member clusters into different groups. Resources will be spread among different cluster groups. SpreadByLabel should not co-exist with SpreadByField.",
          "type": "string"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.StaticClusterAssignment": {
      "description": "StaticClusterAssignment represents the set of desired hard limits for a specific cluster.",
      "type": "object",
      "required": [
        "clusterName",
        "hard"
      ],
      "properties": {
        "clusterName": {
          "description": "ClusterName is the name of the cluster the limits enforce to.",
          "type": "string",
          "default": ""
        },
        "hard": {
          "description": "Hard is the set of desired hard limits for each named resource.",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.StaticClusterWeight": {
      "description": "StaticClusterWeight defines the static cluster weight.",
      "type": "object",
      "required": [
        "targetCluster",
        "weight"
      ],
      "properties": {
        "targetCluster": {
          "description": "TargetCluster describes the filter to select clusters.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterAffinity"
        },
        "weight": {
          "description": "Weight expressing the preference to the cluster(s) specified by 'TargetCluster'.",
          "type": "integer",
          "format": "int64",
          "default": 0
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.BackendStoreConfig": {
      "description": "BackendStoreConfig specifies backend store.",
      "type": "object",
      "properties": {
        "openSearch": {
          "description": "OpenSearch is a community-driven, open source search and analytics suite. Refer to website(https://opensearch.org/) for more details about OpenSearch.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.OpenSearchConfig"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.OpenSearchConfig": {
      "description": "OpenSearchConfig holds the necessary configuration for client to access and config an OpenSearch server.",
      "type": "object",
      "required": [
        "addresses"
      ],
      "properties": {
        "addresses": {
          "description": "Addresses is a list of node endpoint(e.g. 'https://localhost:9200') to use. For the 'node' concept, please refer to: https://opensearch.org/docs/latest/opensearch/index/#clusters-and-nodes",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "secretRef": {
          "description": "SecretRef represents the secret contains mandatory credentials to access the server. The secret should hold credentials as follows: - secret.data.userName - secret.data.password",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.cluster.v1alpha1.LocalSecretReference"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry": {
      "description": "ResourceRegistry represents the configuration of the cache scope, mainly describes which resources in which clusters should be cached.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents the desired behavior of ResourceRegistry.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistrySpec"
        },
        "status": {
          "description": "Status represents the status of ResourceRegistry.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistryStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "search.karmada.io",
          "kind": "ResourceRegistry",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistryList": {
      "description": "ResourceRegistryList is a collection of ResourceRegistry.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items holds a list of ResourceRegistry.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistry"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "search.karmada.io",
          "kind": "ResourceRegistryList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistrySpec": {
      "description": "ResourceRegistrySpec defines the desired state of ResourceRegistry.",
      "type": "object",
      "required": [
        "targetCluster",
        "resourceSelectors"
      ],
      "properties": {
        "backendStore": {
          "description": "BackendStore specifies the location where to store the cached items.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.BackendStoreConfig"
        },
        "resourceSelectors": {
          "description": "ResourceSelectors specifies the resources type that should be cached by cache system.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceSelector"
          }
        },
        "targetCluster": {
          "description": "TargetCluster specifies the clusters where the cache system collect resource from.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.ClusterAffinity"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceRegistryStatus": {
      "description": "ResourceRegistryStatus defines the observed state of ResourceRegistry",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions contain the different condition statuses.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.search.v1alpha1.ResourceSelector": {
      "description": "ResourceSelector specifies the resources type and its scope.",
      "type": "object",
      "required": [
        "apiVersion",
        "kind"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion represents the API version of the target resources.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind represents the kind of the target resources.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace of the target resource. Default is empty, which means all namespaces.",
          "type": "string"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Manifest": {
      "description": "Manifest represents a resource to be deployed on managed cluster.",
      "type": "object"
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.ManifestStatus": {
      "description": "ManifestStatus contains running status of a specific manifest in spec.",
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "health": {
          "description": "Health represents the healthy state of the current resource. There maybe different rules for different resources to achieve health status.",
          "type": "string"
        },
        "identifier": {
          "description": "Identifier represents the identity of a resource linking to manifests in spec.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.ResourceIdentifier"
        },
        "status": {
          "description": "Status reflects running status of current manifest.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.ResourceIdentifier": {
      "description": "ResourceIdentifier provides the identifiers needed to interact with any arbitrary object.",
      "type": "object",
      "required": [
        "ordinal",
        "version",
        "kind",
        "resource",
        "name"
      ],
      "properties": {
        "group": {
          "description": "Group is the group of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the kind of the resource.",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name is the name of the resource",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace is the namespace of the resource, the resource is cluster scoped if the value is empty",
          "type": "string"
        },
        "ordinal": {
          "description": "Ordinal represents an index in manifests list, so the condition can still be linked to a manifest even though manifest cannot be parsed successfully.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "resource": {
          "description": "Resource is the resource type of the resource",
          "type": "string",
          "default": ""
        },
        "version": {
          "description": "Version is the version of the resource.",
          "type": "string",
          "default": ""
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work": {
      "description": "Work defines a list of resources to be deployed on the member cluster.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents the desired behavior of Work.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.WorkSpec"
        },
        "status": {
          "description": "Status represents the status of PropagationStatus.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.WorkStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "work.karmada.io",
          "kind": "Work",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.WorkList": {
      "description": "WorkList is a collection of Work.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items holds a list of Work.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Work"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "work.karmada.io",
          "kind": "WorkList",
          "version": "v1alpha1"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.WorkSpec": {
      "description": "WorkSpec defines the desired state of Work.",
      "type": "object",
      "properties": {
        "workload": {
          "description": "Workload represents the manifest workload to be deployed on managed cluster.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.WorkloadTemplate"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.WorkStatus": {
      "description": "WorkStatus defines the observed state of Work.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions contain the different condition statuses for this work. Valid condition types are: 1. Applied represents workload in Work is applied successfully on a managed cluster. 2. Progressing represents workload in Work is being applied on a managed cluster. 3. Available represents workload in Work exists on the managed cluster. 4. Degraded represents the current state of workload does not match the desired state for a certain period.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        },
        "manifestStatuses": {
          "description": "ManifestStatuses contains running status of manifests in spec.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.ManifestStatus"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.WorkloadTemplate": {
      "description": "WorkloadTemplate represents the manifest workload to be deployed on managed cluster.",
      "type": "object",
      "properties": {
        "manifests": {
          "description": "Manifests represents a list of Kubernetes resources to be deployed on the managed cluster.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha1.Manifest"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.AggregatedStatusItem": {
      "description": "AggregatedStatusItem represents status of the resource running in a member cluster.",
      "type": "object",
      "required": [
        "clusterName"
      ],
      "properties": {
        "applied": {
          "description": "Applied represents if the resource referencing by ResourceBinding or ClusterResourceBinding is successfully applied on the cluster.",
          "type": "boolean"
        },
        "appliedMessage": {
          "description": "AppliedMessage is a human readable message indicating details about the applied status. This is usually holds the error message in case of apply failed.",
          "type": "string"
        },
        "clusterName": {
          "description": "ClusterName represents the member cluster name which the resource deployed on.",
          "type": "string",
          "default": ""
        },
        "health": {
          "description": "Health represents the healthy state of the current resource. There maybe different rules for different resources to achieve health status.",
          "type": "string"
        },
        "status": {
          "description": "Status reflects running status of current manifest.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.BindingSnapshot": {
      "description": "BindingSnapshot is a snapshot of a ResourceBinding or ClusterResourceBinding.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "clusters": {
          "description": "Clusters represents the scheduled result.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.TargetCluster"
          }
        },
        "name": {
          "description": "Name represents the name of the Binding.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace represents the namespace of the Binding. It is required for ResourceBinding. If Namespace is not specified, means the referencing is ClusterResourceBinding.",
          "type": "string"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding": {
      "description": "ClusterResourceBinding represents a binding of a kubernetes resource with a ClusterPropagationPolicy.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents the desired behavior.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBindingSpec"
        },
        "status": {
          "description": "Status represents the most recently observed status of the ResourceBinding.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBindingStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "work.karmada.io",
          "kind": "ClusterResourceBinding",
          "version": "v1alpha2"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBindingList": {
      "description": "ClusterResourceBindingList contains a list of ClusterResourceBinding.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of ClusterResourceBinding.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ClusterResourceBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "work.karmada.io",
          "kind": "ClusterResourceBindingList",
          "version": "v1alpha2"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.GracefulEvictionTask": {
      "description": "GracefulEvictionTask represents a graceful eviction task.",
      "type": "object",
      "required": [
        "fromCluster",
        "reason",
        "producer"
      ],
      "properties": {
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. Clients should not set this value to avoid the time inconsistency issue. It is represented in RFC3339 form(like '2021-04-25T10:02:10Z') and is in UTC.\n\nPopulated by the system. Read-only.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "fromCluster": {
          "description": "FromCluster which cluster the eviction perform from.",
          "type": "string",
          "default": ""
        },
        "gracePeriodSeconds": {
          "description": "GracePeriodSeconds is the maximum waiting duration in seconds before the item should be deleted. If the application on the new cluster cannot reach a Healthy state, Karmada will delete the item after GracePeriodSeconds is reached. Value must be positive integer. It can not co-exist with SuppressDeletion.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Message is a human-readable message indicating details about the eviction. This may be an empty string.",
          "type": "string"
        },
        "producer": {
          "description": "Producer indicates the controller who triggered the eviction.",
          "type": "string",
          "default": ""
        },
        "reason": {
          "description": "Reason contains a programmatic identifier indicating the reason for the eviction. Producers may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
          "type": "string",
          "default": ""
        },
        "replicas": {
          "description": "Replicas indicates the number of replicas should be evicted. Should be ignored for resource type that doesn't have replica.",
          "type": "integer",
          "format": "int32"
        },
        "suppressDeletion": {
          "description": "SuppressDeletion represents the grace period will be persistent until the tools or human intervention stops it. It can not co-exist with GracePeriodSeconds.",
          "type": "boolean"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.NodeClaim": {
      "description": "NodeClaim represents the node claim HardNodeAffinity, NodeSelector and Tolerations required by each replica.",
      "type": "object",
      "properties": {
        "hardNodeAffinity": {
          "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms. Note that only PodSpec.Affinity.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution is included here because it has a hard limit on pod scheduling.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        },
        "nodeSelector": {
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ObjectReference": {
      "description": "ObjectReference contains enough information to locate the referenced object inside current cluster.",
      "type": "object",
      "required": [
        "apiVersion",
        "kind",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion represents the API version of the referent.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind represents the Kind of the referent.",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name represents the name of the referent.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace represents the namespace for the referent. For non-namespace scoped resources(e.g. 'ClusterRole')，do not need specify Namespace, and for namespace scoped resources, Namespace is required. If Namespace is not specified, means the resource is non-namespace scoped.",
          "type": "string"
        },
        "resourceVersion": {
          "description": "ResourceVersion represents the internal version of the referenced object, that can be used by clients to determine when object has changed.",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.",
          "type": "string"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ReplicaRequirements": {
      "description": "ReplicaRequirements represents the requirements required by each replica.",
      "type": "object",
      "properties": {
        "nodeClaim": {
          "description": "NodeClaim represents the node claim HardNodeAffinity, NodeSelector and Tolerations required by each replica.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.NodeClaim"
        },
        "resourceRequest": {
          "description": "ResourceRequest represents the resources required by each replica.",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding": {
      "description": "ResourceBinding represents a binding of a kubernetes resource with a propagation policy.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents the desired behavior.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBindingSpec"
        },
        "status": {
          "description": "Status represents the most recently observed status of the ResourceBinding.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBindingStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "work.karmada.io",
          "kind": "ResourceBinding",
          "version": "v1alpha2"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBindingList": {
      "description": "ResourceBindingList contains a list of ResourceBinding.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of ResourceBinding.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "work.karmada.io",
          "kind": "ResourceBindingList",
          "version": "v1alpha2"
        }
      ]
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBindingSpec": {
      "description": "ResourceBindingSpec represents the expectation of ResourceBinding.",
      "type": "object",
      "required": [
        "resource"
      ],
      "properties": {
        "clusters": {
          "description": "Clusters represents target member clusters where the resource to be deployed.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.TargetCluster"
          }
        },
        "conflictResolution": {
          "description": "ConflictResolution declares how potential conflict should be handled when a resource that is being propagated already exists in the target cluster.\n\nIt defaults to \"Abort\" which means stop propagating to avoid unexpected overwrites. The \"Overwrite\" might be useful when migrating legacy cluster resources to Karmada, in which case conflict is predictable and can be instructed to Karmada take over the resource by overwriting.",
          "type": "string"
        },
        "failover": {
          "description": "Failover indicates how Karmada migrates applications in case of failures. It inherits directly from the associated PropagationPolicy(or ClusterPropagationPolicy).",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.FailoverBehavior"
        },
        "gracefulEvictionTasks": {
          "description": "GracefulEvictionTasks holds the eviction tasks that are expected to perform the eviction in a graceful way. The intended workflow is: 1. Once the controller(such as 'taint-manager') decided to evict the resource that\n   is referenced by current ResourceBinding or ClusterResourceBinding from a target\n   cluster, it removes(or scale down the replicas) the target from Clusters(.spec.Clusters)\n   and builds a graceful eviction task.\n2. The scheduler may perform a re-scheduler and probably select a substitute cluster\n   to take over the evicting workload(resource).\n3. The graceful eviction controller takes care of the graceful eviction tasks and\n   performs the final removal after the workload(resource) is available on the substitute\n   cluster or exceed the grace termination period(defaults to 10 minutes).",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.GracefulEvictionTask"
          }
        },
        "placement": {
          "description": "Placement represents the rule for select clusters to propagate resources.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.policy.v1alpha1.Placement"
        },
        "propagateDeps": {
          "description": "PropagateDeps tells if relevant resources should be propagated automatically. It is inherited from PropagationPolicy or ClusterPropagationPolicy. default false.",
          "type": "boolean"
        },
        "replicaRequirements": {
          "description": "ReplicaRequirements represents the requirements required by each replica.",
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ReplicaRequirements"
        },
        "replicas": {
          "description": "Replicas represents the replica number of the referencing resource.",
          "type": "integer",
          "format": "int32"
        },
        "requiredBy": {
          "description": "RequiredBy represents the list of Bindings that depend on the referencing resource.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.BindingSnapshot"
          }
        },
        "resource": {
          "description": "Resource represents the Kubernetes resource to be propagated.",
          "default": {},
          "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ObjectReference"
        },
        "schedulerName": {
          "description": "SchedulerName represents which scheduler to proceed the scheduling. It inherits directly from the associated PropagationPolicy(or ClusterPropagationPolicy).",
          "type": "string"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.ResourceBindingStatus": {
      "description": "ResourceBindingStatus represents the overall status of the strategy as well as the referenced resources.",
      "type": "object",
      "properties": {
        "aggregatedStatus": {
          "description": "AggregatedStatus represents status list of the resource running in each member cluster.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.AggregatedStatusItem"
          }
        },
        "conditions": {
          "description": "Conditions contain the different condition statuses.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        },
        "schedulerObservedGeneration": {
          "description": "SchedulerObservedGeneration is the generation(.metadata.generation) observed by the scheduler. If SchedulerObservedGeneration is less than the generation in metadata means the scheduler hasn't confirmed the scheduling result or hasn't done the schedule yet.",
          "type": "integer",
          "format": "int64"
        },
        "schedulerObservingAffinityName": {
          "description": "SchedulerObservedAffinityName is the name of affinity term that is the basis of current scheduling.",
          "type": "string"
        }
      }
    },
    "com.github.karmada-io.karmada.pkg.apis.work.v1alpha2.TargetCluster": {
      "description": "TargetCluster represents the identifier of a member cluster.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of target cluster.",
          "type": "string",
          "default": ""
        },
        "replicas": {
          "description": "Replicas in target cluster",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.admissionregistration.v1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "type": "object",
      "required": [
        "namespace",
        "name"
      ],
      "properties": {
        "name": {
          "description": "`name` is the name of the service. Required",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "`namespace` is the namespace of the service. Required",
          "type": "string",
          "default": ""
        },
        "path": {
          "description": "`path` is an optional URL path which will be sent in any request to this service.",
          "type": "string"
        },
        "port": {
          "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.admissionregistration.v1.WebhookClientConfig": {
      "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook",
      "type": "object",
      "properties": {
        "caBundle": {
          "description": "`caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "type": "string",
          "format": "byte"
        },
        "service": {
          "description": "`service` is a reference to the service for this webhook. Either `service` or `url` must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`.",
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ServiceReference"
        },
        "url": {
          "description": "`url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.ContainerResourceMetricSource": {
      "description": "ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
      "type": "object",
      "required": [
        "name",
        "target",
        "container"
      ],
      "properties": {
        "container": {
          "description": "container is the name of the container in the pods of the scaling target",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string",
          "default": ""
        },
        "target": {
          "description": "target specifies the target value for the given metric",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.ContainerResourceMetricStatus": {
      "description": "ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
      "type": "object",
      "required": [
        "name",
        "current",
        "container"
      ],
      "properties": {
        "container": {
          "description": "container is the name of the container in the pods of the scaling target",
          "type": "string",
          "default": ""
        },
        "current": {
          "description": "current contains the current value for the given metric",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
        },
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string",
          "default": ""
        }
      }
    },
    "io.k8s.api.autoscaling.v2.CrossVersionObjectReference": {
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "apiVersion is the API version of the referent",
          "type": "string"
        },
        "kind": {
          "description": "kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string",
          "default": ""
        }
      }
    },
    "io.k8s.api.autoscaling.v2.ExternalMetricSource": {
      "description": "ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
      "type": "object",
      "required": [
        "metric",
        "target"
      ],
      "properties": {
        "metric": {
          "description": "metric identifies the target metric by name and selector",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
        },
        "target": {
          "description": "target specifies the target value for the given metric",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.ExternalMetricStatus": {
      "description": "ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.",
      "type": "object",
      "required": [
        "metric",
        "current"
      ],
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
        },
        "metric": {
          "description": "metric identifies the target metric by name and selector",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.HPAScalingPolicy": {
      "description": "HPAScalingPolicy is a single policy which must hold true for a specified past interval.",
      "type": "object",
      "required": [
        "type",
        "value",
        "periodSeconds"
      ],
      "properties": {
        "periodSeconds": {
          "description": "periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "type": {
          "description": "type is used to specify the scaling policy.",
          "type": "string",
          "default": ""
        },
        "value": {
          "description": "value contains the amount of change which is permitted by the policy. It must be greater than zero",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      }
    },
    "io.k8s.api.autoscaling.v2.HPAScalingRules": {
      "description": "HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.",
      "type": "object",
      "properties": {
        "policies": {
          "description": "policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HPAScalingPolicy"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "selectPolicy": {
          "description": "selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.",
          "type": "string"
        },
        "stabilizationWindowSeconds": {
          "description": "stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerBehavior": {
      "description": "HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).",
      "type": "object",
      "properties": {
        "scaleDown": {
          "description": "scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HPAScalingRules"
        },
        "scaleUp": {
          "description": "scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:\n  * increase no more than 4 pods per 60 seconds\n  * double the number of pods per 60 seconds\nNo stabilization is used.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HPAScalingRules"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerCondition": {
      "description": "HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "lastTransitionTime is the last time the condition transitioned from one status to another",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "message is a human-readable explanation containing details about the transition",
          "type": "string"
        },
        "reason": {
          "description": "reason is the reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "status is the status of the condition (True, False, Unknown)",
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "type describes the current condition",
          "type": "string",
          "default": ""
        }
      }
    },
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerStatus": {
      "description": "HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.",
      "type": "object",
      "required": [
        "desiredReplicas"
      ],
      "properties": {
        "conditions": {
          "description": "conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerCondition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentMetrics": {
          "description": "currentMetrics is the last read state of the metrics used by this autoscaler.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricStatus"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "currentReplicas": {
          "description": "currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.",
          "type": "integer",
          "format": "int32"
        },
        "desiredReplicas": {
          "description": "desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "lastScaleTime": {
          "description": "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed by this autoscaler.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.MetricIdentifier": {
      "description": "MetricIdentifier defines the name and optionally selector for a metric",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name is the name of the given metric",
          "type": "string",
          "default": ""
        },
        "selector": {
          "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.MetricSpec": {
      "description": "MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "containerResource": {
          "description": "containerResource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ContainerResourceMetricSource"
        },
        "external": {
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ExternalMetricSource"
        },
        "object": {
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ObjectMetricSource"
        },
        "pods": {
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.PodsMetricSource"
        },
        "resource": {
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ResourceMetricSource"
        },
        "type": {
          "description": "type is the type of metric source.  It should be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled",
          "type": "string",
          "default": ""
        }
      }
    },
    "io.k8s.api.autoscaling.v2.MetricStatus": {
      "description": "MetricStatus describes the last-read state of a single metric.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "containerResource": {
          "description": "container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ContainerResourceMetricStatus"
        },
        "external": {
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ExternalMetricStatus"
        },
        "object": {
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ObjectMetricStatus"
        },
        "pods": {
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.PodsMetricStatus"
        },
        "resource": {
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ResourceMetricStatus"
        },
        "type": {
          "description": "type is the type of metric source.  It will be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled",
          "type": "string",
          "default": ""
        }
      }
    },
    "io.k8s.api.autoscaling.v2.MetricTarget": {
      "description": "MetricTarget defines the target value, average value, or average utilization of a specific metric",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "averageUtilization": {
          "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
          "type": "integer",
          "format": "int32"
        },
        "averageValue": {
          "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "type": {
          "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
          "type": "string",
          "default": ""
        },
        "value": {
          "description": "value is the target value of the metric (as a quantity).",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.MetricValueStatus": {
      "description": "MetricValueStatus holds the current value for a metric",
      "type": "object",
      "properties": {
        "averageUtilization": {
          "description": "currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.",
          "type": "integer",
          "format": "int32"
        },
        "averageValue": {
          "description": "averageValue is the current value of the average of the metric across all relevant pods (as a quantity)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "value": {
          "description": "value is the current value of the metric (as a quantity).",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.ObjectMetricSource": {
      "description": "ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
      "type": "object",
      "required": [
        "describedObject",
        "target",
        "metric"
      ],
      "properties": {
        "describedObject": {
          "description": "describedObject specifies the descriptions of a object,such as kind,name apiVersion",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
        },
        "metric": {
          "description": "metric identifies the target metric by name and selector",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
        },
        "target": {
          "description": "target specifies the target value for the given metric",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.ObjectMetricStatus": {
      "description": "ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
      "type": "object",
      "required": [
        "metric",
        "current",
        "describedObject"
      ],
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
        },
        "describedObject": {
          "description": "DescribedObject specifies the descriptions of a object,such as kind,name apiVersion",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
        },
        "metric": {
          "description": "metric identifies the target metric by name and selector",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.PodsMetricSource": {
      "description": "PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.",
      "type": "object",
      "required": [
        "metric",
        "target"
      ],
      "properties": {
        "metric": {
          "description": "metric identifies the target metric by name and selector",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
        },
        "target": {
          "description": "target specifies the target value for the given metric",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.PodsMetricStatus": {
      "description": "PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).",
      "type": "object",
      "required": [
        "metric",
        "current"
      ],
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
        },
        "metric": {
          "description": "metric identifies the target metric by name and selector",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.ResourceMetricSource": {
      "description": "ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
      "type": "object",
      "required": [
        "name",
        "target"
      ],
      "properties": {
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string",
          "default": ""
        },
        "target": {
          "description": "target specifies the target value for the given metric",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
        }
      }
    },
    "io.k8s.api.autoscaling.v2.ResourceMetricStatus": {
      "description": "ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
      "type": "object",
      "required": [
        "name",
        "current"
      ],
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
        },
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string",
          "default": ""
        }
      }
    },
    "io.k8s.api.core.v1.LoadBalancerIngress": {
      "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
      "type": "object",
      "properties": {
        "hostname": {
          "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
          "type": "string"
        },
        "ip": {
          "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
          "type": "string"
        },
        "ports": {
          "description": "Ports is a list of records of service ports If used, every port defined in the service should have an entry in it",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.PortStatus"
          },
          "x-kubernetes-list-type": "atomic"
        }
      }
    },
    "io.k8s.api.core.v1.LoadBalancerStatus": {
      "description": "LoadBalancerStatus represents the status of a load-balancer.",
      "type": "object",
      "properties": {
        "ingress": {
          "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerIngress"
          }
        }
      }
    },
    "io.k8s.api.core.v1.NodeSelector": {
      "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
      "type": "object",
      "required": [
        "nodeSelectorTerms"
      ],
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
          }
        }
      },
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.NodeSelectorRequirement": {
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string",
          "default": ""
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n\nPossible enum values:\n - `\"DoesNotExist\"`\n - `\"Exists\"`\n - `\"Gt\"`\n - `\"In\"`\n - `\"Lt\"`\n - `\"NotIn\"`",
          "type": "string",
          "default": "",
          "enum": [
            "DoesNotExist",
            "Exists",
            "Gt",
            "In",
            "Lt",
            "NotIn"
          ]
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "io.k8s.api.core.v1.NodeSelectorTerm": {
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          }
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          }
        }
      },
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.PortStatus": {
      "type": "object",
      "required": [
        "port",
        "protocol"
      ],
      "properties": {
        "error": {
          "description": "Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.",
          "type": "string"
        },
        "port": {
          "description": "Port is the port number of the service port of which status is recorded here",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "protocol": {
          "description": "Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
          "type": "string",
          "default": "",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ]
        }
      }
    },
    "io.k8s.api.core.v1.ServiceStatus": {
      "description": "ServiceStatus represents the current status of a service.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Current service state",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "loadBalancer": {
          "description": "LoadBalancer contains the current status of the load-balancer, if one is present.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus"
        }
      }
    },
    "io.k8s.api.core.v1.Taint": {
      "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
      "type": "object",
      "required": [
        "key",
        "effect"
      ],
      "properties": {
        "effect": {
          "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\n\nPossible enum values:\n - `\"NoExecute\"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.\n - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.\n - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.",
          "type": "string",
          "default": "",
          "enum": [
            "NoExecute",
            "NoSchedule",
            "PreferNoSchedule"
          ]
        },
        "key": {
          "description": "Required. The taint key to be applied to a node.",
          "type": "string",
          "default": ""
        },
        "timeAdded": {
          "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "value": {
          "description": "The taint value corresponding to the taint key.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.Toleration": {
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
      "type": "object",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n\nPossible enum values:\n - `\"NoExecute\"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.\n - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.\n - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.",
          "type": "string",
          "enum": [
            "NoExecute",
            "NoSchedule",
            "PreferNoSchedule"
          ]
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n\nPossible enum values:\n - `\"Equal\"`\n - `\"Exists\"`",
          "type": "string",
          "enum": [
            "Equal",
            "Exists"
          ]
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.core.v1.TypedLocalObjectReference": {
      "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string",
          "default": ""
        }
      },
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.networking.v1.HTTPIngressPath": {
      "description": "HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.",
      "type": "object",
      "required": [
        "pathType",
        "backend"
      ],
      "properties": {
        "backend": {
          "description": "backend defines the referenced service endpoint to which the traffic will be forwarded to.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend"
        },
        "path": {
          "description": "path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".",
          "type": "string"
        },
        "pathType": {
          "description": "pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types.\n\nPossible enum values:\n - `\"Exact\"` matches the URL path exactly and with case sensitivity.\n - `\"ImplementationSpecific\"` matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types.\n - `\"Prefix\"` matches based on a URL path prefix split by '/'. Matching is case sensitive and done on a path element by element basis. A path element refers to the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). If multiple matching paths exist in an Ingress spec, the longest matching path is given priority. Examples: - /foo/bar does not match requests to /foo/barbaz - /foo/bar matches request to /foo/bar and /foo/bar/baz - /foo and /foo/ both match requests to /foo and /foo/. If both paths are present in an Ingress spec, the longest matching path (/foo/) is given priority.",
          "type": "string",
          "enum": [
            "Exact",
            "ImplementationSpecific",
            "Prefix"
          ]
        }
      }
    },
    "io.k8s.api.networking.v1.HTTPIngressRuleValue": {
      "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://\u003chost\u003e/\u003cpath\u003e?\u003csearchpart\u003e -\u003e backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
      "type": "object",
      "required": [
        "paths"
      ],
      "properties": {
        "paths": {
          "description": "paths is a collection of paths that map requests to backends.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressPath"
          },
          "x-kubernetes-list-type": "atomic"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressBackend": {
      "description": "IngressBackend describes all endpoints for a given service and port.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with \"Service\".",
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
        },
        "service": {
          "description": "service references a service as a backend. This is a mutually exclusive setting with \"Resource\".",
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressServiceBackend"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressLoadBalancerIngress": {
      "description": "IngressLoadBalancerIngress represents the status of a load-balancer ingress point.",
      "type": "object",
      "properties": {
        "hostname": {
          "description": "hostname is set for load-balancer ingress points that are DNS based.",
          "type": "string"
        },
        "ip": {
          "description": "ip is set for load-balancer ingress points that are IP based.",
          "type": "string"
        },
        "ports": {
          "description": "ports provides information about the ports exposed by this LoadBalancer.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressPortStatus"
          },
          "x-kubernetes-list-type": "atomic"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressLoadBalancerStatus": {
      "description": "IngressLoadBalancerStatus represents the status of a load-balancer.",
      "type": "object",
      "properties": {
        "ingress": {
          "description": "ingress is a list containing ingress points for the load-balancer.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressLoadBalancerIngress"
          }
        }
      }
    },
    "io.k8s.api.networking.v1.IngressPortStatus": {
      "description": "IngressPortStatus represents the error condition of a service port",
      "type": "object",
      "required": [
        "port",
        "protocol"
      ],
      "properties": {
        "error": {
          "description": "error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.",
          "type": "string"
        },
        "port": {
          "description": "port is the port number of the ingress port.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "protocol": {
          "description": "protocol is the protocol of the ingress port. The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
          "type": "string",
          "default": "",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ]
        }
      }
    },
    "io.k8s.api.networking.v1.IngressRule": {
      "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
      "type": "object",
      "properties": {
        "host": {
          "description": "host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nhost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.",
          "type": "string"
        },
        "http": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressRuleValue"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressServiceBackend": {
      "description": "IngressServiceBackend references a Kubernetes Service as a Backend.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name is the referenced service. The service must exist in the same namespace as the Ingress object.",
          "type": "string",
          "default": ""
        },
        "port": {
          "description": "port of the referenced service. A port name or port number is required for a IngressServiceBackend.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1.ServiceBackendPort"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressSpec": {
      "description": "IngressSpec describes the Ingress the user wishes to exist.",
      "type": "object",
      "properties": {
        "defaultBackend": {
          "description": "defaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.",
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend"
        },
        "ingressClassName": {
          "description": "ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -\u003e IngressClass -\u003e Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.",
          "type": "string"
        },
        "rules": {
          "description": "rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressRule"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "tls": {
          "description": "tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressTLS"
          },
          "x-kubernetes-list-type": "atomic"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressStatus": {
      "description": "IngressStatus describe the current state of the Ingress.",
      "type": "object",
      "properties": {
        "loadBalancer": {
          "description": "loadBalancer contains the current status of the load-balancer.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressLoadBalancerStatus"
        }
      }
    },
    "io.k8s.api.networking.v1.IngressTLS": {
      "description": "IngressTLS describes the transport layer security associated with an ingress.",
      "type": "object",
      "properties": {
        "hosts": {
          "description": "hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-list-type": "atomic"
        },
        "secretName": {
          "description": "secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the \"Host\" header is used for routing.",
          "type": "string"
        }
      }
    },
    "io.k8s.api.networking.v1.ServiceBackendPort": {
      "description": "ServiceBackendPort is the service port being referenced.",
      "type": "object",
      "properties": {
        "name": {
          "description": "name is the name of the port on the Service. This is a mutually exclusive setting with \"Number\".",
          "type": "string"
        },
        "number": {
          "description": "number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with \"Name\".",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON": {
      "description": "JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil."
    },
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n``` \u003cquantity\u003e        ::= \u003csignedNumber\u003e\u003csuffix\u003e\n\n\t(Note that \u003csuffix\u003e may be empty, from the \"\" case in \u003cdecimalSI\u003e.)\n\n\u003cdigit\u003e           ::= 0 | 1 | ... | 9 \u003cdigits\u003e          ::= \u003cdigit\u003e | \u003cdigit\u003e\u003cdigits\u003e \u003cnumber\u003e          ::= \u003cdigits\u003e | \u003cdigits\u003e.\u003cdigits\u003e | \u003cdigits\u003e. | .\u003cdigits\u003e \u003csign\u003e            ::= \"+\" | \"-\" \u003csignedNumber\u003e    ::= \u003cnumber\u003e | \u003csign\u003e\u003cnumber\u003e \u003csuffix\u003e          ::= \u003cbinarySI\u003e | \u003cdecimalExponent\u003e | \u003cdecimalSI\u003e \u003cbinarySI\u003e        ::= Ki | Mi | Gi | Ti | Pi | Ei\n\n\t(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\n\u003cdecimalSI\u003e       ::= m | \"\" | k | M | G | T | P | E\n\n\t(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\n\u003cdecimalExponent\u003e ::= \"e\" \u003csignedNumber\u003e | \"E\" \u003csignedNumber\u003e ```\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n\n- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.\n\nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n- 1.5 will be serialized as \"1500m\" - 1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup": {
      "description": "APIGroup contains the name, the supported versions, and the preferred version of a group.",
      "type": "object",
      "required": [
        "name",
        "versions"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "name is the name of the group.",
          "type": "string",
          "default": ""
        },
        "preferredVersion": {
          "description": "preferredVersion is the version preferred by the API server, which probably is the storage version.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
        },
        "serverAddressByClientCIDRs": {
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          }
        },
        "versions": {
          "description": "versions are the versions supported in this group.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroup",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList": {
      "description": "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "groups": {
          "description": "groups is a list of APIGroup.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroupList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource": {
      "description": "APIResource specifies the name of a resource and whether it is namespaced.",
      "type": "object",
      "required": [
        "name",
        "singularName",
        "namespaced",
        "kind",
        "verbs"
      ],
      "properties": {
        "categories": {
          "description": "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "group": {
          "description": "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
          "type": "string"
        },
        "kind": {
          "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "name is the plural name of the resource.",
          "type": "string",
          "default": ""
        },
        "namespaced": {
          "description": "namespaced indicates if a resource is namespaced or not.",
          "type": "boolean",
          "default": false
        },
        "shortNames": {
          "description": "shortNames is a list of suggested short names of the resource.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "singularName": {
          "description": "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
          "type": "string",
          "default": ""
        },
        "storageVersionHash": {
          "description": "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.",
          "type": "string"
        },
        "verbs": {
          "description": "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "version": {
          "description": "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList": {
      "description": "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
      "type": "object",
      "required": [
        "groupVersion",
        "resources"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "groupVersion": {
          "description": "groupVersion is the group and version this APIResourceList is for.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "resources": {
          "description": "resources contains the name of the resources and if they are namespaced.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIResourceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Condition": {
      "description": "Condition contains details for one aspect of the current state of this API Resource.",
      "type": "object",
      "required": [
        "type",
        "status",
        "lastTransitionTime",
        "reason",
        "message"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
          "type": "string",
          "default": ""
        },
        "observedGeneration": {
          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
          "type": "integer",
          "format": "int64"
        },
        "reason": {
          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
          "type": "string",
          "default": ""
        },
        "status": {
          "description": "status of the condition, one of True, False, Unknown.",
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
          "type": "string",
          "default": ""
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions": {
      "description": "DeleteOptions may be provided when deleting an API object.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "gracePeriodSeconds": {
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
          "type": "integer",
          "format": "int64"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "orphanDependents": {
          "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
          "type": "boolean"
        },
        "preconditions": {
          "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions"
        },
        "propagationPolicy": {
          "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1beta2"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v2"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v2beta1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v2beta2"
        },
        {
          "group": "autoscaling.karmada.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "cluster.karmada.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "cluster.x-k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "config.karmada.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "discovery.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "discovery.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "events.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "events.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "extensions",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta2"
        },
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta3"
        },
        {
          "group": "internal.apiserver.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "multicluster.x-k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "networking.karmada.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "node.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "node.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "node.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "policy",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "policy",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "policy.karmada.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "resource.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha2"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "search.karmada.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "work.karmada.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "work.karmada.io",
          "kind": "DeleteOptions",
          "version": "v1alpha2"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:\u003cname\u003e', where \u003cname\u003e is the name of a field in a struct, or key in a map 'v:\u003cvalue\u003e', where \u003cvalue\u003e is the exact json formatted value of a list item 'i:\u003cindex\u003e', where \u003cindex\u003e is position of a item in a list 'k:\u003ckeys\u003e', where \u003ckeys\u003e is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery": {
      "description": "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
      "type": "object",
      "required": [
        "groupVersion",
        "version"
      ],
      "properties": {
        "groupVersion": {
          "description": "groupVersion specifies the API group and version in the form \"group/version\"",
          "type": "string",
          "default": ""
        },
        "version": {
          "description": "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
          "type": "string",
          "default": ""
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          }
        },
        "matchLabels": {
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string",
          "default": ""
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string",
          "default": ""
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": "object",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": "integer",
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
          "type": "string"
        },
        "time": {
          "description": "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "type": "object",
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string",
          "default": ""
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": "string",
          "default": ""
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string",
          "default": ""
        }
      },
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Patch": {
      "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions": {
      "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
      "type": "object",
      "properties": {
        "resourceVersion": {
          "description": "Specifies the target ResourceVersion",
          "type": "string"
        },
        "uid": {
          "description": "Specifies the target UID.",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR": {
      "description": "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
      "type": "object",
      "required": [
        "clientCIDR",
        "serverAddress"
      ],
      "properties": {
        "clientCIDR": {
          "description": "The CIDR with which clients can match their IP to figure out the server address that they should use.",
          "type": "string",
          "default": ""
        },
        "serverAddress": {
          "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
          "type": "string",
          "default": ""
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Status": {
      "description": "Status is a return value for calls that don't return other objects.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "code": {
          "description": "Suggested HTTP return code for this status, 0 if not set.",
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
          "type": "string"
        },
        "status": {
          "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Status",
          "version": "v1"
        },
        {
          "group": "resource.k8s.io",
          "kind": "Status",
          "version": "v1alpha2"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause": {
      "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
      "type": "object",
      "properties": {
        "field": {
          "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
          "type": "string"
        },
        "reason": {
          "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails": {
      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
      "type": "object",
      "properties": {
        "causes": {
          "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
          }
        },
        "group": {
          "description": "The group attribute of the resource associated with the status StatusReason.",
          "type": "string"
        },
        "kind": {
          "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
          "type": "string"
        },
        "retryAfterSeconds": {
          "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
          "type": "integer",
          "format": "int32"
        },
        "uid": {
          "description": "UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": "string",
      "format": "date-time"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent": {
      "description": "Event represents a single event to a watched resource.",
      "type": "object",
      "required": [
        "type",
        "object"
      ],
      "properties": {
        "object": {
          "description": "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1beta2"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v2"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v2beta1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v2beta2"
        },
        {
          "group": "autoscaling.karmada.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "cluster.karmada.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "cluster.x-k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "config.karmada.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "discovery.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "discovery.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "events.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "events.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "extensions",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta2"
        },
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta3"
        },
        {
          "group": "internal.apiserver.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "multicluster.x-k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "networking.karmada.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "node.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "node.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "node.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "policy",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "policy",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "policy.karmada.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "resource.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha2"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "search.karmada.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "work.karmada.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "work.karmada.io",
          "kind": "WatchEvent",
          "version": "v1alpha2"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.runtime.RawExtension": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
      "type": "object"
    }
  },
  "parameters": {
    "allowWatchBookmarks-HC2hJt-J": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
      "name": "allowWatchBookmarks",
      "in": "query"
    },
    "body-2Y1dVQaQ": {
      "name": "body",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      }
    },
    "body-78PwaGsr": {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      }
    },
    "continue-QfD61s0i": {
      "uniqueItems": true,
      "type": "string",
      "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
      "name": "continue",
      "in": "query"
    },
    "fieldManager-7c6nTn1T": {
      "uniqueItems": true,
      "type": "string",
      "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
      "name": "fieldManager",
      "in": "query"
    },
    "fieldManager-Qy4HdaTW": {
      "uniqueItems": true,
      "type": "string",
      "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
      "name": "fieldManager",
      "in": "query"
    },
    "fieldSelector-xIcQKXFG": {
      "uniqueItems": true,
      "type": "string",
      "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
      "name": "fieldSelector",
      "in": "query"
    },
    "force-tOGGb0Yi": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
      "name": "force",
      "in": "query"
    },
    "gracePeriodSeconds--K5HaBOS": {
      "uniqueItems": true,
      "type": "integer",
      "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
      "name": "gracePeriodSeconds",
      "in": "query"
    },
    "labelSelector-5Zw57w4C": {
      "uniqueItems": true,
      "type": "string",
      "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
      "name": "labelSelector",
      "in": "query"
    },
    "limit-1NfNmdNH": {
      "uniqueItems": true,
      "type": "integer",
      "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
      "name": "limit",
      "in": "query"
    },
    "namespace-vgWSWtn3": {
      "uniqueItems": true,
      "type": "string",
      "description": "object name and auth scope, such as for teams and projects",
      "name": "namespace",
      "in": "path",
      "required": true
    },
    "orphanDependents-uRB25kX5": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
      "name": "orphanDependents",
      "in": "query"
    },
    "path-RHIocHeS": {
      "uniqueItems": true,
      "type": "string",
      "name": "path",
      "in": "query"
    },
    "path-z6Ciiujn": {
      "uniqueItems": true,
      "type": "string",
      "description": "path to the resource",
      "name": "path",
      "in": "path",
      "required": true
    },
    "pretty-nN7o5FEq": {
      "uniqueItems": true,
      "type": "string",
      "description": "If 'true', then the output is pretty printed.",
      "name": "pretty",
      "in": "query"
    },
    "propagationPolicy-6jk3prlO": {
      "uniqueItems": true,
      "type": "string",
      "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
      "name": "propagationPolicy",
      "in": "query"
    },
    "resourceVersion-5WAnf1kx": {
      "uniqueItems": true,
      "type": "string",
      "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
      "name": "resourceVersion",
      "in": "query"
    },
    "resourceVersionMatch-t8XhRHeC": {
      "uniqueItems": true,
      "type": "string",
      "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
      "name": "resourceVersionMatch",
      "in": "query"
    },
    "sendInitialEvents-rLXlEK_k": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
      "name": "sendInitialEvents",
      "in": "query"
    },
    "timeoutSeconds-yvYezaOC": {
      "uniqueItems": true,
      "type": "integer",
      "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
      "name": "timeoutSeconds",
      "in": "query"
    },
    "watch-XNNPZGbK": {
      "uniqueItems": true,
      "type": "boolean",
      "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
      "name": "watch",
      "in": "query"
    }
  }
}
