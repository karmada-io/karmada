apiVersion: config.karmada.io/v1alpha1
kind: ResourceInterpreterCustomization
metadata:
  name: declarative-configuration-bucket
spec:
  target:
    apiVersion: source.toolkit.fluxcd.io/v1beta2
    kind: Bucket
  customizations:
    healthInterpretation:
      luaScript: >
        function InterpretHealth(observedObj)
          if observedObj.status ~= nil and observedObj.status.conditions ~= nil then
            for conditionIndex = 1, #observedObj.status.conditions do
              if observedObj.status.conditions[conditionIndex].type == 'Ready' and observedObj.status.conditions[conditionIndex].status == 'True' and observedObj.status.conditions[conditionIndex].reason == 'Succeeded' then
                return true
              end
            end
          end
          return false
        end
    statusAggregation:
      luaScript: >
        function AggregateStatus(desiredObj, statusItems)
          if desiredObj.status == nil then
            desiredObj.status = {}
          end
          if desiredObj.metadata.generation == nil then
            desiredObj.metadata.generation = 0
          end
          if desiredObj.status.observedGeneration == nil then
            desiredObj.status.observedGeneration = 0
          end

          -- Initialize status fields if status doest not exist
          -- If the Bucket is not spread to any cluster, its status also should be aggregated
          if statusItems == nil then
            desiredObj.status.artifact = {}
            desiredObj.status.conditions = {}
            desiredObj.status.observedGeneration = desiredObj.metadata.generation 
            desiredObj.status.url = ''
            return desiredObj
          end

          local artifact = {}
          local conditions = {}
          local generation = desiredObj.metadata.generation
          local observedGeneration = desiredObj.status.observedGeneration
          local url = ''

          -- Count all members that their status is updated to the latest generation
          local observedResourceTemplateGenerationCount = 0

          local conditionsIndex = 1
          for i = 1, #statusItems do
            if statusItems[i].status ~= nil and statusItems[i].status.artifact ~= nil then
              artifact = statusItems[i].status.artifact
            end
            if statusItems[i].status ~= nil and statusItems[i].status.url ~= nil and statusItems[i].status.url ~= '' then
              url = statusItems[i].status.url
            end
            if statusItems[i].status ~= nil and statusItems[i].status.conditions ~= nil then
              for conditionIndex = 1, #statusItems[i].status.conditions do
                statusItems[i].status.conditions[conditionIndex].message = statusItems[i].clusterName..'='..statusItems[i].status.conditions[conditionIndex].message
                hasCondition = false
                for index = 1, #conditions do
                  if conditions[index].type == statusItems[i].status.conditions[conditionIndex].type and conditions[index].status == statusItems[i].status.conditions[conditionIndex].status and conditions[index].reason == statusItems[i].status.conditions[conditionIndex].reason then
                    conditions[index].message = conditions[index].message..', '..statusItems[i].status.conditions[conditionIndex].message
                    hasCondition = true
                    break
                  end
                end
                if not hasCondition then
                  conditions[conditionsIndex] = statusItems[i].status.conditions[conditionIndex]
                  conditionsIndex = conditionsIndex + 1                  
                end
              end
            end

            -- Check if the member's status is updated to the latest generation
            local resourceTemplateGeneration = 0
            if statusItems[i].status ~= nil and statusItems[i].status.resourceTemplateGeneration ~= nil then 
              resourceTemplateGeneration = statusItems[i].status.resourceTemplateGeneration
            end
            local memberGeneration = 0
            if statusItems[i].status ~= nil and statusItems[i].status.generation ~= nil then
              memberGeneration = statusItems[i].status.generation
            end
            local memberObservedGeneration = 0
            if statusItems[i].status ~= nil and statusItems[i].status.observedGeneration ~= nil then
              memberObservedGeneration = statusItems[i].status.observedGeneration
            end
            if resourceTemplateGeneration == generation and memberGeneration == memberObservedGeneration then
              observedResourceTemplateGenerationCount = observedResourceTemplateGenerationCount + 1
            end          
          end

          -- Update the observed generation based on the observedResourceTemplateGenerationCount
          if observedResourceTemplateGenerationCount == #statusItems then
            desiredObj.status.observedGeneration = generation
          else
            desiredObj.status.observedGeneration = observedGeneration 
          end

          desiredObj.status.artifact = artifact
          desiredObj.status.conditions = conditions
          desiredObj.status.url = url
          return desiredObj
        end
    retention:
      luaScript: >
        function Retain(desiredObj, observedObj)
          if observedObj.spec.suspend ~= nil then
            desiredObj.spec.suspend = observedObj.spec.suspend
          end
          return desiredObj
        end
    statusReflection:
      luaScript: >
        function ReflectStatus (observedObj)
          local status = {}
          if observedObj == nil or observedObj.status == nil then 
            return status
          end
          status.conditions = observedObj.status.conditions
          status.artifact = observedObj.status.artifact
          status.observedIgnore = observedObj.status.observedIgnore
          status.observedGeneration = observedObj.status.observedGeneration
          status.url = observedObj.status.url

          -- handle resource generation report
          if observedObj.metadata == nil then
            return status
          end
          status.generation = observedObj.metadata.generation

          if observedObj.metadata.annotations == nil then
            return status
          end
          local resourceTemplateGeneration = tonumber(observedObj.metadata.annotations["resourcetemplate.karmada.io/generation"])
          if resourceTemplateGeneration ~= nil then
              status.resourceTemplateGeneration = resourceTemplateGeneration
          end

          return status
        end
    dependencyInterpretation:
      luaScript: >
        function GetDependencies(desiredObj)
          dependentSecrets = {}
          refs = {}
          local idx = 1
          if desiredObj.spec.secretRef ~= nil and desiredObj.spec.secretRef.name ~= '' then
            dependentSecrets[desiredObj.spec.secretRef.name] = true
          end
          for key, value in pairs(dependentSecrets) do
            dependObj = {}
            dependObj.apiVersion = 'v1'
            dependObj.kind = 'Secret'
            dependObj.name = key
            dependObj.namespace = desiredObj.metadata.namespace
            refs[idx] = dependObj
            idx = idx + 1
          end
          return refs
        end
