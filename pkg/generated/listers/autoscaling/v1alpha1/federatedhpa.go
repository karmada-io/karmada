/*
Copyright The Karmada Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/karmada-io/karmada/pkg/apis/autoscaling/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FederatedHPALister helps list FederatedHPAs.
// All objects returned here must be treated as read-only.
type FederatedHPALister interface {
	// List lists all FederatedHPAs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedHPA, err error)
	// FederatedHPAs returns an object that can list and get FederatedHPAs.
	FederatedHPAs(namespace string) FederatedHPANamespaceLister
	FederatedHPAListerExpansion
}

// federatedHPALister implements the FederatedHPALister interface.
type federatedHPALister struct {
	indexer cache.Indexer
}

// NewFederatedHPALister returns a new FederatedHPALister.
func NewFederatedHPALister(indexer cache.Indexer) FederatedHPALister {
	return &federatedHPALister{indexer: indexer}
}

// List lists all FederatedHPAs in the indexer.
func (s *federatedHPALister) List(selector labels.Selector) (ret []*v1alpha1.FederatedHPA, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedHPA))
	})
	return ret, err
}

// FederatedHPAs returns an object that can list and get FederatedHPAs.
func (s *federatedHPALister) FederatedHPAs(namespace string) FederatedHPANamespaceLister {
	return federatedHPANamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedHPANamespaceLister helps list and get FederatedHPAs.
// All objects returned here must be treated as read-only.
type FederatedHPANamespaceLister interface {
	// List lists all FederatedHPAs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedHPA, err error)
	// Get retrieves the FederatedHPA from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FederatedHPA, error)
	FederatedHPANamespaceListerExpansion
}

// federatedHPANamespaceLister implements the FederatedHPANamespaceLister
// interface.
type federatedHPANamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedHPAs in the indexer for a given namespace.
func (s federatedHPANamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedHPA, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedHPA))
	})
	return ret, err
}

// Get retrieves the FederatedHPA from the indexer for a given namespace and name.
func (s federatedHPANamespaceLister) Get(name string) (*v1alpha1.FederatedHPA, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("federatedhpa"), name)
	}
	return obj.(*v1alpha1.FederatedHPA), nil
}
