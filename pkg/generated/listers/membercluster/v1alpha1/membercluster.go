// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/huawei-cloudnative/karmada/pkg/apis/membercluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MemberClusterLister helps list MemberClusters.
// All objects returned here must be treated as read-only.
type MemberClusterLister interface {
	// List lists all MemberClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MemberCluster, err error)
	// Get retrieves the MemberCluster from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MemberCluster, error)
	MemberClusterListerExpansion
}

// memberClusterLister implements the MemberClusterLister interface.
type memberClusterLister struct {
	indexer cache.Indexer
}

// NewMemberClusterLister returns a new MemberClusterLister.
func NewMemberClusterLister(indexer cache.Indexer) MemberClusterLister {
	return &memberClusterLister{indexer: indexer}
}

// List lists all MemberClusters in the indexer.
func (s *memberClusterLister) List(selector labels.Selector) (ret []*v1alpha1.MemberCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MemberCluster))
	})
	return ret, err
}

// Get retrieves the MemberCluster from the index for a given name.
func (s *memberClusterLister) Get(name string) (*v1alpha1.MemberCluster, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("membercluster"), name)
	}
	return obj.(*v1alpha1.MemberCluster), nil
}
