// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/karmada-io/karmada/pkg/apis/policy/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePropagationPolicies implements PropagationPolicyInterface
type FakePropagationPolicies struct {
	Fake *FakePolicyV1alpha1
	ns   string
}

var propagationpoliciesResource = v1alpha1.SchemeGroupVersion.WithResource("propagationpolicies")

var propagationpoliciesKind = v1alpha1.SchemeGroupVersion.WithKind("PropagationPolicy")

// Get takes name of the propagationPolicy, and returns the corresponding propagationPolicy object, and an error if there is any.
func (c *FakePropagationPolicies) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.PropagationPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(propagationpoliciesResource, c.ns, name), &v1alpha1.PropagationPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PropagationPolicy), err
}

// List takes label and field selectors, and returns the list of PropagationPolicies that match those selectors.
func (c *FakePropagationPolicies) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.PropagationPolicyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(propagationpoliciesResource, propagationpoliciesKind, c.ns, opts), &v1alpha1.PropagationPolicyList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.PropagationPolicyList{ListMeta: obj.(*v1alpha1.PropagationPolicyList).ListMeta}
	for _, item := range obj.(*v1alpha1.PropagationPolicyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested propagationPolicies.
func (c *FakePropagationPolicies) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(propagationpoliciesResource, c.ns, opts))

}

// Create takes the representation of a propagationPolicy and creates it.  Returns the server's representation of the propagationPolicy, and an error, if there is any.
func (c *FakePropagationPolicies) Create(ctx context.Context, propagationPolicy *v1alpha1.PropagationPolicy, opts v1.CreateOptions) (result *v1alpha1.PropagationPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(propagationpoliciesResource, c.ns, propagationPolicy), &v1alpha1.PropagationPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PropagationPolicy), err
}

// Update takes the representation of a propagationPolicy and updates it. Returns the server's representation of the propagationPolicy, and an error, if there is any.
func (c *FakePropagationPolicies) Update(ctx context.Context, propagationPolicy *v1alpha1.PropagationPolicy, opts v1.UpdateOptions) (result *v1alpha1.PropagationPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(propagationpoliciesResource, c.ns, propagationPolicy), &v1alpha1.PropagationPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PropagationPolicy), err
}

// Delete takes name of the propagationPolicy and deletes it. Returns an error if one occurs.
func (c *FakePropagationPolicies) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(propagationpoliciesResource, c.ns, name, opts), &v1alpha1.PropagationPolicy{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePropagationPolicies) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(propagationpoliciesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.PropagationPolicyList{})
	return err
}

// Patch applies the patch and returns the patched propagationPolicy.
func (c *FakePropagationPolicies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.PropagationPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(propagationpoliciesResource, c.ns, name, pt, data, subresources...), &v1alpha1.PropagationPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PropagationPolicy), err
}
