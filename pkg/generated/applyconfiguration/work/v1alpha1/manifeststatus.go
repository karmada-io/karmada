/*
Copyright The Karmada Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	workv1alpha1 "github.com/karmada-io/karmada/pkg/apis/work/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ManifestStatusApplyConfiguration represents a declarative configuration of the ManifestStatus type for use
// with apply.
type ManifestStatusApplyConfiguration struct {
	Identifier *ResourceIdentifierApplyConfiguration `json:"identifier,omitempty"`
	Status     *runtime.RawExtension                 `json:"status,omitempty"`
	Health     *workv1alpha1.ResourceHealth          `json:"health,omitempty"`
}

// ManifestStatusApplyConfiguration constructs a declarative configuration of the ManifestStatus type for use with
// apply.
func ManifestStatus() *ManifestStatusApplyConfiguration {
	return &ManifestStatusApplyConfiguration{}
}

// WithIdentifier sets the Identifier field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Identifier field is set to the value of the last call.
func (b *ManifestStatusApplyConfiguration) WithIdentifier(value *ResourceIdentifierApplyConfiguration) *ManifestStatusApplyConfiguration {
	b.Identifier = value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *ManifestStatusApplyConfiguration) WithStatus(value runtime.RawExtension) *ManifestStatusApplyConfiguration {
	b.Status = &value
	return b
}

// WithHealth sets the Health field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Health field is set to the value of the last call.
func (b *ManifestStatusApplyConfiguration) WithHealth(value workv1alpha1.ResourceHealth) *ManifestStatusApplyConfiguration {
	b.Health = &value
	return b
}
