/*
Copyright The Karmada Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// WorkloadTemplateApplyConfiguration represents a declarative configuration of the WorkloadTemplate type for use
// with apply.
type WorkloadTemplateApplyConfiguration struct {
	Manifests []ManifestApplyConfiguration `json:"manifests,omitempty"`
}

// WorkloadTemplateApplyConfiguration constructs a declarative configuration of the WorkloadTemplate type for use with
// apply.
func WorkloadTemplate() *WorkloadTemplateApplyConfiguration {
	return &WorkloadTemplateApplyConfiguration{}
}

// WithManifests adds the given value to the Manifests field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Manifests field.
func (b *WorkloadTemplateApplyConfiguration) WithManifests(values ...*ManifestApplyConfiguration) *WorkloadTemplateApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithManifests")
		}
		b.Manifests = append(b.Manifests, *values[i])
	}
	return b
}
