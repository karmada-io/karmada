/*
Copyright The Karmada Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/api/core/v1"
)

// ReplicaRequirementsApplyConfiguration represents a declarative configuration of the ReplicaRequirements type for use
// with apply.
type ReplicaRequirementsApplyConfiguration struct {
	NodeClaim         *NodeClaimApplyConfiguration `json:"nodeClaim,omitempty"`
	ResourceRequest   *v1.ResourceList             `json:"resourceRequest,omitempty"`
	Namespace         *string                      `json:"namespace,omitempty"`
	PriorityClassName *string                      `json:"priorityClassName,omitempty"`
}

// ReplicaRequirementsApplyConfiguration constructs a declarative configuration of the ReplicaRequirements type for use with
// apply.
func ReplicaRequirements() *ReplicaRequirementsApplyConfiguration {
	return &ReplicaRequirementsApplyConfiguration{}
}

// WithNodeClaim sets the NodeClaim field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeClaim field is set to the value of the last call.
func (b *ReplicaRequirementsApplyConfiguration) WithNodeClaim(value *NodeClaimApplyConfiguration) *ReplicaRequirementsApplyConfiguration {
	b.NodeClaim = value
	return b
}

// WithResourceRequest sets the ResourceRequest field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceRequest field is set to the value of the last call.
func (b *ReplicaRequirementsApplyConfiguration) WithResourceRequest(value v1.ResourceList) *ReplicaRequirementsApplyConfiguration {
	b.ResourceRequest = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *ReplicaRequirementsApplyConfiguration) WithNamespace(value string) *ReplicaRequirementsApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithPriorityClassName sets the PriorityClassName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PriorityClassName field is set to the value of the last call.
func (b *ReplicaRequirementsApplyConfiguration) WithPriorityClassName(value string) *ReplicaRequirementsApplyConfiguration {
	b.PriorityClassName = &value
	return b
}
