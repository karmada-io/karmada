/*
Copyright The Karmada Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha1 "github.com/karmada-io/karmada/pkg/apis/policy/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GracefulEvictionTaskApplyConfiguration represents a declarative configuration of the GracefulEvictionTask type for use
// with apply.
type GracefulEvictionTaskApplyConfiguration struct {
	FromCluster            *string             `json:"fromCluster,omitempty"`
	PurgeMode              *v1alpha1.PurgeMode `json:"purgeMode,omitempty"`
	Replicas               *int32              `json:"replicas,omitempty"`
	Reason                 *string             `json:"reason,omitempty"`
	Message                *string             `json:"message,omitempty"`
	Producer               *string             `json:"producer,omitempty"`
	GracePeriodSeconds     *int32              `json:"gracePeriodSeconds,omitempty"`
	SuppressDeletion       *bool               `json:"suppressDeletion,omitempty"`
	PreservedLabelState    map[string]string   `json:"preservedLabelState,omitempty"`
	CreationTimestamp      *v1.Time            `json:"creationTimestamp,omitempty"`
	ClustersBeforeFailover []string            `json:"clustersBeforeFailover,omitempty"`
}

// GracefulEvictionTaskApplyConfiguration constructs a declarative configuration of the GracefulEvictionTask type for use with
// apply.
func GracefulEvictionTask() *GracefulEvictionTaskApplyConfiguration {
	return &GracefulEvictionTaskApplyConfiguration{}
}

// WithFromCluster sets the FromCluster field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FromCluster field is set to the value of the last call.
func (b *GracefulEvictionTaskApplyConfiguration) WithFromCluster(value string) *GracefulEvictionTaskApplyConfiguration {
	b.FromCluster = &value
	return b
}

// WithPurgeMode sets the PurgeMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PurgeMode field is set to the value of the last call.
func (b *GracefulEvictionTaskApplyConfiguration) WithPurgeMode(value v1alpha1.PurgeMode) *GracefulEvictionTaskApplyConfiguration {
	b.PurgeMode = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *GracefulEvictionTaskApplyConfiguration) WithReplicas(value int32) *GracefulEvictionTaskApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithReason sets the Reason field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Reason field is set to the value of the last call.
func (b *GracefulEvictionTaskApplyConfiguration) WithReason(value string) *GracefulEvictionTaskApplyConfiguration {
	b.Reason = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *GracefulEvictionTaskApplyConfiguration) WithMessage(value string) *GracefulEvictionTaskApplyConfiguration {
	b.Message = &value
	return b
}

// WithProducer sets the Producer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Producer field is set to the value of the last call.
func (b *GracefulEvictionTaskApplyConfiguration) WithProducer(value string) *GracefulEvictionTaskApplyConfiguration {
	b.Producer = &value
	return b
}

// WithGracePeriodSeconds sets the GracePeriodSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GracePeriodSeconds field is set to the value of the last call.
func (b *GracefulEvictionTaskApplyConfiguration) WithGracePeriodSeconds(value int32) *GracefulEvictionTaskApplyConfiguration {
	b.GracePeriodSeconds = &value
	return b
}

// WithSuppressDeletion sets the SuppressDeletion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SuppressDeletion field is set to the value of the last call.
func (b *GracefulEvictionTaskApplyConfiguration) WithSuppressDeletion(value bool) *GracefulEvictionTaskApplyConfiguration {
	b.SuppressDeletion = &value
	return b
}

// WithPreservedLabelState puts the entries into the PreservedLabelState field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the PreservedLabelState field,
// overwriting an existing map entries in PreservedLabelState field with the same key.
func (b *GracefulEvictionTaskApplyConfiguration) WithPreservedLabelState(entries map[string]string) *GracefulEvictionTaskApplyConfiguration {
	if b.PreservedLabelState == nil && len(entries) > 0 {
		b.PreservedLabelState = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.PreservedLabelState[k] = v
	}
	return b
}

// WithCreationTimestamp sets the CreationTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CreationTimestamp field is set to the value of the last call.
func (b *GracefulEvictionTaskApplyConfiguration) WithCreationTimestamp(value v1.Time) *GracefulEvictionTaskApplyConfiguration {
	b.CreationTimestamp = &value
	return b
}

// WithClustersBeforeFailover adds the given value to the ClustersBeforeFailover field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClustersBeforeFailover field.
func (b *GracefulEvictionTaskApplyConfiguration) WithClustersBeforeFailover(values ...string) *GracefulEvictionTaskApplyConfiguration {
	for i := range values {
		b.ClustersBeforeFailover = append(b.ClustersBeforeFailover, values[i])
	}
	return b
}
