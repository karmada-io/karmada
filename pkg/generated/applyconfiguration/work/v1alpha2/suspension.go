/*
Copyright The Karmada Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha1 "github.com/karmada-io/karmada/pkg/apis/policy/v1alpha1"
)

// SuspensionApplyConfiguration represents a declarative configuration of the Suspension type for use
// with apply.
type SuspensionApplyConfiguration struct {
	v1alpha1.Suspension `json:",inline"`
	Scheduling          *bool `json:"scheduling,omitempty"`
}

// SuspensionApplyConfiguration constructs a declarative configuration of the Suspension type for use with
// apply.
func Suspension() *SuspensionApplyConfiguration {
	return &SuspensionApplyConfiguration{}
}

// WithDispatching sets the Dispatching field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Dispatching field is set to the value of the last call.
func (b *SuspensionApplyConfiguration) WithDispatching(value bool) *SuspensionApplyConfiguration {
	b.Dispatching = &value
	return b
}

// WithDispatchingOnClusters sets the DispatchingOnClusters field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DispatchingOnClusters field is set to the value of the last call.
func (b *SuspensionApplyConfiguration) WithDispatchingOnClusters(value v1alpha1.SuspendClusters) *SuspensionApplyConfiguration {
	b.DispatchingOnClusters = &value
	return b
}

// WithScheduling sets the Scheduling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scheduling field is set to the value of the last call.
func (b *SuspensionApplyConfiguration) WithScheduling(value bool) *SuspensionApplyConfiguration {
	b.Scheduling = &value
	return b
}
