/*
Copyright The Karmada Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha1 "github.com/karmada-io/karmada/pkg/apis/policy/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ResourceBindingSpecApplyConfiguration represents a declarative configuration of the ResourceBindingSpec type for use
// with apply.
type ResourceBindingSpecApplyConfiguration struct {
	Resource                    *ObjectReferenceApplyConfiguration       `json:"resource,omitempty"`
	PropagateDeps               *bool                                    `json:"propagateDeps,omitempty"`
	ReplicaRequirements         *ReplicaRequirementsApplyConfiguration   `json:"replicaRequirements,omitempty"`
	Replicas                    *int32                                   `json:"replicas,omitempty"`
	Clusters                    []TargetClusterApplyConfiguration        `json:"clusters,omitempty"`
	Placement                   *v1alpha1.Placement                      `json:"placement,omitempty"`
	GracefulEvictionTasks       []GracefulEvictionTaskApplyConfiguration `json:"gracefulEvictionTasks,omitempty"`
	RequiredBy                  []BindingSnapshotApplyConfiguration      `json:"requiredBy,omitempty"`
	SchedulerName               *string                                  `json:"schedulerName,omitempty"`
	Failover                    *v1alpha1.FailoverBehavior               `json:"failover,omitempty"`
	ConflictResolution          *v1alpha1.ConflictResolution             `json:"conflictResolution,omitempty"`
	RescheduleTriggeredAt       *v1.Time                                 `json:"rescheduleTriggeredAt,omitempty"`
	Suspension                  *SuspensionApplyConfiguration            `json:"suspension,omitempty"`
	PreserveResourcesOnDeletion *bool                                    `json:"preserveResourcesOnDeletion,omitempty"`
}

// ResourceBindingSpecApplyConfiguration constructs a declarative configuration of the ResourceBindingSpec type for use with
// apply.
func ResourceBindingSpec() *ResourceBindingSpecApplyConfiguration {
	return &ResourceBindingSpecApplyConfiguration{}
}

// WithResource sets the Resource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resource field is set to the value of the last call.
func (b *ResourceBindingSpecApplyConfiguration) WithResource(value *ObjectReferenceApplyConfiguration) *ResourceBindingSpecApplyConfiguration {
	b.Resource = value
	return b
}

// WithPropagateDeps sets the PropagateDeps field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PropagateDeps field is set to the value of the last call.
func (b *ResourceBindingSpecApplyConfiguration) WithPropagateDeps(value bool) *ResourceBindingSpecApplyConfiguration {
	b.PropagateDeps = &value
	return b
}

// WithReplicaRequirements sets the ReplicaRequirements field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReplicaRequirements field is set to the value of the last call.
func (b *ResourceBindingSpecApplyConfiguration) WithReplicaRequirements(value *ReplicaRequirementsApplyConfiguration) *ResourceBindingSpecApplyConfiguration {
	b.ReplicaRequirements = value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *ResourceBindingSpecApplyConfiguration) WithReplicas(value int32) *ResourceBindingSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithClusters adds the given value to the Clusters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Clusters field.
func (b *ResourceBindingSpecApplyConfiguration) WithClusters(values ...*TargetClusterApplyConfiguration) *ResourceBindingSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithClusters")
		}
		b.Clusters = append(b.Clusters, *values[i])
	}
	return b
}

// WithPlacement sets the Placement field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Placement field is set to the value of the last call.
func (b *ResourceBindingSpecApplyConfiguration) WithPlacement(value v1alpha1.Placement) *ResourceBindingSpecApplyConfiguration {
	b.Placement = &value
	return b
}

// WithGracefulEvictionTasks adds the given value to the GracefulEvictionTasks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the GracefulEvictionTasks field.
func (b *ResourceBindingSpecApplyConfiguration) WithGracefulEvictionTasks(values ...*GracefulEvictionTaskApplyConfiguration) *ResourceBindingSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithGracefulEvictionTasks")
		}
		b.GracefulEvictionTasks = append(b.GracefulEvictionTasks, *values[i])
	}
	return b
}

// WithRequiredBy adds the given value to the RequiredBy field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RequiredBy field.
func (b *ResourceBindingSpecApplyConfiguration) WithRequiredBy(values ...*BindingSnapshotApplyConfiguration) *ResourceBindingSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRequiredBy")
		}
		b.RequiredBy = append(b.RequiredBy, *values[i])
	}
	return b
}

// WithSchedulerName sets the SchedulerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SchedulerName field is set to the value of the last call.
func (b *ResourceBindingSpecApplyConfiguration) WithSchedulerName(value string) *ResourceBindingSpecApplyConfiguration {
	b.SchedulerName = &value
	return b
}

// WithFailover sets the Failover field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Failover field is set to the value of the last call.
func (b *ResourceBindingSpecApplyConfiguration) WithFailover(value v1alpha1.FailoverBehavior) *ResourceBindingSpecApplyConfiguration {
	b.Failover = &value
	return b
}

// WithConflictResolution sets the ConflictResolution field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConflictResolution field is set to the value of the last call.
func (b *ResourceBindingSpecApplyConfiguration) WithConflictResolution(value v1alpha1.ConflictResolution) *ResourceBindingSpecApplyConfiguration {
	b.ConflictResolution = &value
	return b
}

// WithRescheduleTriggeredAt sets the RescheduleTriggeredAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RescheduleTriggeredAt field is set to the value of the last call.
func (b *ResourceBindingSpecApplyConfiguration) WithRescheduleTriggeredAt(value v1.Time) *ResourceBindingSpecApplyConfiguration {
	b.RescheduleTriggeredAt = &value
	return b
}

// WithSuspension sets the Suspension field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Suspension field is set to the value of the last call.
func (b *ResourceBindingSpecApplyConfiguration) WithSuspension(value *SuspensionApplyConfiguration) *ResourceBindingSpecApplyConfiguration {
	b.Suspension = value
	return b
}

// WithPreserveResourcesOnDeletion sets the PreserveResourcesOnDeletion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PreserveResourcesOnDeletion field is set to the value of the last call.
func (b *ResourceBindingSpecApplyConfiguration) WithPreserveResourcesOnDeletion(value bool) *ResourceBindingSpecApplyConfiguration {
	b.PreserveResourcesOnDeletion = &value
	return b
}
